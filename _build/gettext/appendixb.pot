# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Leo Brodie
# This file is distributed under the same license as the Thinking Forth package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Thinking Forth 0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-26 02:28+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../appendixb.rst:4
msgid "Appendix B: Defining DOER/MAKE"
msgstr ""

#: ../../appendixb.rst:6
msgid "If your system doesn’t have ``DOER`` and ``MAKE`` already defined, this appendix is meant to help you install them and, if necessary, understand how they work. Because by its nature this construct is system dependent, I’ve included several different implementations at the end of this appendix in the hope that one of them will work for you. If no, and if this section doesn’t give you enough information to get them running, you probably have an unusual system. Please don’t ask me for help; ask your Forth vendor."
msgstr ""

#: ../../appendixb.rst:16
msgid "Here’s how it works. ``DOER`` is a defining word that creates an entry with one cell in its parameter field. That cell contains the vector address, and is initialized to point to a no-op word called ``NOTHING``."
msgstr ""

#: ../../appendixb.rst:21
msgid "Children of ``DOER`` will execute that ``DOES>`` code of ``DOER``, which does only two things: fetch the vector address and place it on the return stack. That’s all. Forth execution then continues with this address on the return stack, which will cause the vectored function to be performed. It’s like saying (in ’83-Standard)"
msgstr ""

#: ../../appendixb.rst:34
msgid "which executes ``NOTHING`` . (This trick only works with colon definitions.)"
msgstr ""

#: ../../appendixb.rst:36
msgid "Here’s an illustration of the dictionary entry created when we enter"
msgstr ""

#: ../../appendixb.rst:40
msgid "Now suppose we define:"
msgstr ""

#: ../../appendixb.rst:48
msgid "that is, we define a word that can vector ``JOE`` to do a carriage return."
msgstr ""

#: ../../appendixb.rst:50
msgid "Here’s a picture of the compiled definition of ``TEST`` :"
msgstr ""

#: ../../appendixb.rst:54
msgid "Let’s look at the code for ``MAKE``. Since we’re using ``MAKE`` inside a colon definition, ``STATE`` will be true, and we’ll execute the phrase:"
msgstr ""

#: ../../appendixb.rst:65
msgid "We can see how ``MAKE`` has compiled the address of the run-time routine, ``(MAKE)``, followed by a zero. (We’ll explain what the zero is for, and why we save its address in the variable ``MARKER``, later). Now let’s look at what ``(MAKE)`` does when we execute our new definition ``TEST`` :"
msgstr ""

#: ../../appendixb.rst:75
msgid "R>"
msgstr ""

#: ../../appendixb.rst:76
msgid "Gets an address from the return stack. This address points to the cell just past ``(MAKE)`` , where the zero is."
msgstr ""

#: ../../appendixb.rst:79
#: ../../appendixb.rst:82
msgid "DUP 2+"
msgstr ""

#: ../../appendixb.rst:80
msgid "Gets the address of the second cell after ``(MAKE)`` , where the address of ``JOE`` is."
msgstr ""

#: ../../appendixb.rst:83
msgid "Gets the address of the third cell after ``(MAKE)`` , where the code we want to execute begins.  The stack now has: ( 'marker, 'joe, 'code --- )"
msgstr ""

#: ../../appendixb.rst:87
msgid "SWAP @ >BODY"
msgstr ""

#: ../../appendixb.rst:88
msgid "Fetches the contents of the address pointing to ``JOE`` (i.e., gets the address ``JOE`` and computes ``JOE`` s pfa, where the vector address goes."
msgstr ""

#: ../../appendixb.rst:92
msgid "!"
msgstr ""

#: ../../appendixb.rst:93
msgid "Stores the address where the new code ``CR`` , etc.) into the vector address of ``JOE`` ."
msgstr ""

#: ../../appendixb.rst:97
msgid "Now ``JOE`` points inside the definition of ``TEST`` .  When we type ``JOE`` , we'll do a carriage return."
msgstr ""

#: ../../appendixb.rst:100
msgid "@ ?DUP IF >R THEN"
msgstr ""

#: ../../appendixb.rst:101
msgid "Fetches the contents of the cell containing zero.  Since the cell does contain zero, the ``IF THEN`` statement is not performed."
msgstr ""

#: ../../appendixb.rst:106
msgid "That’s the basic idea. But what about that cell containing zero? That’s for the use of ``;AND``. Suppose we changed TEST to read:"
msgstr ""

#: ../../appendixb.rst:116
msgid "That is, when we invoke TEST we’ll vector JOE to do a ``CR``, and we’ll do a ``SPACE`` right now. Here’s what this new version of TEST will look like:"
msgstr ""

#: ../../appendixb.rst:122
msgid "Here’s the definition of ``;AND``:"
msgstr ""

#: ../../appendixb.rst:130
msgid "We can see that ``;AND`` has compiled an ``EXIT``, just as semicolon would."
msgstr ""

#: ../../appendixb.rst:134
msgid "Next, recall that ``MAKE`` saved the address of that cell in a variable called ``MARKER``. Now ``;AND`` stores ``HERE`` (the location of the second string of code beginning with ``SPACE``) into the cell previously containing zero. Now ``(MAKE)`` has a pointer to the place to resume execution. The phrase"
msgstr ""

#: ../../appendixb.rst:148
msgid "will leave on the return stack the address of the code beginning with ``SPACE``. Thus execution will skip over the code between ``MAKE`` and ``;AND`` and continue with the remainder of the definition up to semicolon."
msgstr ""

#: ../../appendixb.rst:153
msgid "The word ``UNDO`` ticks the name of a ``DOER`` word, and stores the address of ``NOTHING`` into it."
msgstr ""

#: ../../appendixb.rst:157
msgid "One final note: on some systems you may encounter a problem. If you use ``MAKE`` outside of a colon definition to create a forward reference, you may not be able to find the most recently defined word. For instance, if you have:"
msgstr ""

#: ../../appendixb.rst:169
msgid "your system might think that refrain has not been defined. The problem is due to the placement of ``SMUDGE`` . As a solution, try rearranging the order of definitions or, if necessary, put ``MAKE`` code inside a definition which you then execute:"
msgstr ""

#: ../../appendixb.rst:180
msgid "In Laboratory Microsystems PC/FORTH 2.0, the ``UNSMUDGE`` on line 9 handles the problem. This problem does not arise with the Laxen/Perry/Harris model."
msgstr ""

#: ../../appendixb.rst:184
msgid "The final screen is an example of using ``DOER/MAKE``. After loading the block, enter"
msgstr ""

#: ../../appendixb.rst:193
msgid "then enter"
msgstr ""

#: ../../appendixb.rst:201
msgid "followed by return, as many times as you like (you’ll get a different reason each time)."
msgstr ""
