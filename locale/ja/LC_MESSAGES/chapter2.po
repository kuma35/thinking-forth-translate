# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Leo Brodie
# This file is distributed under the same license as the Thinking Forth
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Thinking Forth 0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-04 22:12+0900\n"
"PO-Revision-Date: 2019-07-10 01:51+0900\n"
"Last-Translator: kuma35\n"
"Language: ja_JP\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../chapter2.rst:4
msgid "2. Analysis"
msgstr "第2章 分析"

#: ../../chapter2.rst:6
msgid ""
"Anyone who tells you there is some definite number of phases to the "
"software development cycle is a fool."
msgstr "ソフトウェア開発サイクルに決まった数のフェイズがあると言う人は愚かです。"

#: ../../chapter2.rst:9
msgid "Nevertheless …"
msgstr "それでも…"

#: ../../chapter2.rst:12
msgid "The Nine Phases of the Programming Cycle"
msgstr "プログラミングサイクルの9つのフェイズ"

#: ../../chapter2.rst:14
msgid ""
"As we’ve seen, Forth integrates aspects of design with aspects of "
"implementation and maintenance. As a result, the notion of a “typical "
"development cycle” makes as much sense as a “typical noise.”"
msgstr ""
"これまで見てきたように、Forthは設計の側面と実装・保守の側面を統合しています。 "
"その結果、「典型的な開発サイクル」という概念は、「典型的なノイズ」と同じくらいの意味しかありません。"

#: ../../chapter2.rst:18
msgid ""
"But any approach is better than no approach, and indeed, some approaches "
"have worked out better than others. Here is a development cycle that "
"represents an “average” of the most successful approaches used in "
"software projects:"
msgstr "しかし、どんなアプローチもアプローチ無しよりは良いです。そして成程、一部のアプローチは他のアプローチよりもマシです。以下がソフトウェアプロジェクトで使われていて最も成功しているアプローチの「平均的な」開発サイクルです。"

#: ../../chapter2.rst:23
msgid "Analysis"
msgstr "分析"

#: ../../chapter2.rst:25
msgid "Discover the Requirements and Constraints"
msgstr "要件と制約を発見する"

#: ../../chapter2.rst:27
msgid "Build a Conceptual Model of the Solution"
msgstr "解決策の概念モデルを構築する"

#: ../../chapter2.rst:29
msgid "Estimate Cost/Schedule/Performance"
msgstr "費用、期間、性能の見積もり"

# 意味不明。一体どんなことするのか？
#: ../../chapter2.rst:31
msgid "Engineering"
msgstr "エンジニアリング"

#: ../../chapter2.rst:33
msgid "Preliminary Design"
msgstr "予備設計"

#: ../../chapter2.rst:35
msgid "Detailed Design"
msgstr "詳細設計"

#: ../../chapter2.rst:37
msgid "Implementation"
msgstr "実装"

#: ../../chapter2.rst:39
msgid "Usage"
msgstr "使用"

#: ../../chapter2.rst:41
msgid "Optimization"
msgstr "最適化"

#: ../../chapter2.rst:43
msgid "Validation and Debugging"
msgstr "検証とデバッグ"

#: ../../chapter2.rst:45
msgid "Maintenance"
msgstr "保守"

#: ../../chapter2.rst:47
msgid ""
"In this book we’ll treat the first six stages of the cycle, focusing on "
"analysis, design, and implementation."
msgstr "この本ではサイクルの最初の6つを取り扱います。分析・設計・実装に焦点を当てます。"

#: ../../chapter2.rst:50
msgid ""
"In a Forth project the phases occur on several levels. Looking at a "
"project from the widest perspective, each of these steps could take a "
"month or more. One step follows the next, like seasons."
msgstr "Forthプロジェクトではこれらのフェイズは幾つかのレベルで発生します。最も広い観点からプロジェクトを見ると、これら各フェイズは1ヶ月以上かかる事があります。季節が移り変わるように、あるフェイズに次のフェイズが続きます。"

#: ../../chapter2.rst:54
msgid ""
"But Forth programmers also apply these same phases toward defining each "
"word. The cycle then repeats on the order of minutes."
msgstr "しかしForthプログラマは各ワードを定義するときも同様のフェイズを適用します。そのサイクルは分単位のオーダーで繰り返されます。"

#: ../../chapter2.rst:58
msgid ""
"Developing an application with this rapid repetition of the programming "
"cycle is known as using the “Iterative Approach.”"
msgstr "プログラミングサイクルをこのように素早く繰り返してアプリケーションを開発することは「反復アプローチ」として知られています。"

#: ../../chapter2.rst:62
msgid "The Iterative Approach"
msgstr "対話的アプローチ"

#: ../../chapter2.rst:64
msgid ""
"The iterative approach was explained eloquently by Kim Harris [harris81]_"
" .  He begins by describing the scientific method:"
msgstr "反復的アプローチはキム・ハリスによって雄弁に説明されています。 [harris81]_ 彼は科学的手法を説明するところから始めます。"

#: ../../chapter2.rst:67
msgid ""
"\\.\\.\\. a never-ending cycle of discovery and refinement. It first "
"studies a natural system and gathers observations about its behavior. "
"Then the observations are modeled to produce a theory about the natural "
"system. Next, analysis tools are applied to the model, which produces "
"predictions about the real system's behavior. Experiments are devised to "
"compare actual behavior to the predicted behavior. The natural system is "
"again studied, and the model is revised."
msgstr "…それは果てしない発見と洗練のサイクル。それにはまず、既存の自然のシステムを研究し、そのふるまいを観察します。それから、その観察結果を自然のシステムについての理論を生み出すためにモデル化します。次に、分析ツールをそのモデルに適用することで、現実のシステムのふるまいに関する予測が生成されます。実験とは現実のふるまいと予測したふるまいを比較することです。こうして自然のシステムが再び研究され、モデルが改訂されました。"

#: ../../chapter2.rst:79
msgid ""
"The iterative approach to the software development cycle, from \"The "
"Forth Philosophy\", by Kim Harris, **Dr. Dobb's Journal.**"
msgstr ""
"ソフトウェア開発のための反復的アプローチ(\"The Forth Philosophy\", by Kim Harris, **Dr. "
"Dobb's Journal.** より)"

#: ../../chapter2.rst:81
msgid ""
"The **goal** of the method is to produce a model which accurately "
"predicts all observable behavior of the natural system."
msgstr "この方法の「目標」は、自然のシステムのすべての観察可能な行動を正確に予測するモデルを作成することです。"

#: ../../chapter2.rst:84
msgid ""
"Harris then applies the scientific method to the software development "
"cycle, illustrated in :numref:`fig2-1` :"
msgstr "そしてハリスはこの科学的手法を :numref:`fig2-1` に示すように、ソフトウェア開発サイクルに適用します。"

#: ../../chapter2.rst:87
msgid ""
"A problem is analyzed to determine what functions are required in the "
"solution."
msgstr "解決策に必要な機能を決定するために問題が分析されます。"

#: ../../chapter2.rst:90
msgid ""
"Decisions are made about how to achieve those functions with the "
"available resources."
msgstr "利用可能な資源(resources)を使ってこれらの機能をどのように達成するか決定します。"

#: ../../chapter2.rst:93
msgid "A program is written which attempts to implement the design."
msgstr "設計を実装するためのプログラムが記述されます。"

#: ../../chapter2.rst:95
msgid ""
"The program is tested to determine if the functions were implemented "
"correctly."
msgstr "プログラムは、機能が正しく実装されたかどうかを判断するためにテストされます。"

#: ../../chapter2.rst:98
msgid "Mr. Harris adds:"
msgstr "ハリスは加えて、"

#: ../../chapter2.rst:100
msgid ""
"Software development in Forth seeks first to find the simplest solution "
"to a given problem. This is done by implementing selected parts of the "
"problem separately and by ignoring as many constraints as possible. Then "
"one or a few constraints are imposed and the program is modified."
msgstr "Forthでのソフトウェア開発では、まず最初に、与えられた問題に対する最もシンプルな解決策を見つける事を求めています。問題の、選択した部分をばらばらにし、できるだけ制約を無視して実装することで行います。その後一つまたは幾つかの制約が課され、プログラムが修正されます。"

#: ../../chapter2.rst:106
msgid ""
"An excellent testimonial to the development/testing model of design is "
"evolution. From protozoa to tadpoles to people, each species along the "
"way has consisted of functional, living beings. The Creator does not "
"appear to be a top-down designer."
msgstr "設計の開発モデル・テストモデルを表す優れた証言は「進化」です。原生生物からオタマジャクシ、そして人類まで、進化の道に沿ったそれぞれの種は機能的な生物からなっています。創造主はトップダウン設計者ではないように見えます。"

#: ../../chapter2.rst:113
msgid ""
"Start simple. Get it running. Learn what you're trying to do. Add "
"complexity gradually, as needed to fit the requirements and constraints. "
"Don't be afraid to restart from scratch."
msgstr "シンプルに始めましょう。それを実行して下さい。あなたが試そうとしていることを習い学びましょう。要件と制約に合うように、必要に応じて徐々に複雑さを増して下さい。最初からやりなすことを恐れないで下さい。"

#: ../../chapter2.rst:118
msgid "The Value of Planning"
msgstr "計画の価値"

#: ../../chapter2.rst:120
msgid ""
"In the nine phases at the start of this chapter we listed five steps "
"*before* “implementation.” Yet in :doc:`Chapter One<chapter1>` we saw "
"that an overindulgence in planning is both difficult and pointless."
msgstr ""
"この章の冒頭の、9つのフェイズで、「実装」の前に5つのフェイズを挙げました。なお、 :doc:`Chapter One<chapter1>` "
"では、計画への耽溺は苦難が伴い、かつ無意味であることがわかりました。"

#: ../../chapter2.rst:124
msgid ""
"Clearly you can’t undertake a significant software project—regardless of "
"the language—without some degree of planning. Exactly what degree is "
"appropriate?"
msgstr "言語に関係なく、ある程度の計画無しに重要なソフトウェアプロジェクトに着手できないのは明らかです。正確には、どの程度の計画が適切なのでしょうか？"

#: ../../chapter2.rst:185
msgid ""
"More than one Forth programmer has expressed high regard for **Dave "
"Johnson** 's meticulous approach to planning. Johnson is supervisor at "
"Moore Products Co. in Springhouse, Pennsylvania. The firm specializes in "
"industrial instrumentation and process control applications. Dave has "
"been using Forth since 1978. He describes his approach:"
msgstr ""
"複数のForthプログラマが、 **デーブ・ジョンソン** の計画に対する几帳面アプローチを高く評価しています。 "
"ジョンソンは、ペンシルベニア州スプリングハウスにあるムーアプロダクツ社のスーパーバイザーです。 "
"同社は産業用計装およびプロセス制御アプリケーションを専門としています。 "
"デーブは1978年以来Forthを使用しています。以下は彼自身による、このアプローチの説明です。"

#: ../../chapter2.rst:129
msgid ""
"Compared with many others that use Forth, I suppose we take a more formal"
" approach. I learned this the hard way, though. My lack of discipline in "
"the early years has come back to haunt me."
msgstr "Forthを使っている他の多くのユーザと比べて、私たちはもっと正式なアプローチを取っていると思います。私がこれを学ぶのは大変でした。私の、初期の規律の欠如は、私を悩ませてきました。"

#: ../../chapter2.rst:133
msgid ""
"We use two tools to come up with new products: a functional specification"
" and a design specification. Our department of Sales & Applications comes"
" up with the functional specification, through customer contact."
msgstr "私たちは新製品を思いつくために２つのツールを使います。機能仕様と設計仕様です。私たちの販売・アプリケーション部門ではカスタマーセンターを通じて機能仕様を作成しています。"

#: ../../chapter2.rst:137
msgid ""
"Once we've agreed on what we're going to do, the functional specification"
" is turned over to our department. At that point we work through a "
"design, and come up with the design specification."
msgstr "私たちがやるのに合意したら、機能仕様は私たちの部署に引き渡されます。その時点で私たちは設計作業して、設計仕様を考え出します。"

#: ../../chapter2.rst:141
msgid ""
"Up to this point our approach is no different from programming in any "
"language. But with Forth, we go about designing somewhat differently. "
"With Forth you don't have to work 95% through your design before you can "
"start coding, but rather 60% before you can get into the iterative "
"process."
msgstr ""
"これまでのところ、私たちのアプローチはどの言語のプログラミングとも変わりません。 しかし、Forthでは、設計を多少変更します。 "
"Forthを使用すると、コーディングを開始する前に設計を95％行う必要はありませんが、反復プロセスに入る前に設計を60％行っておく必要があります。"

#: ../../chapter2.rst:147
msgid ""
"A typical project would be to add a functional enhancement to one of our "
"products. For example, we have an intelligent terminal with disk drives, "
"and we need certain protocols for communicating with another device. The "
"project to design the protocols, come up with displays, provide the "
"operator interfaces, etc. may take several months. The functional "
"specification takes a month; the design specification takes a month; "
"coding takes three months; integration and testing take another month."
msgstr ""
"典型的なプロジェクトは、当社のある製品に機能強化を加えることです。 "
"たとえば、ディスクドライブを搭載したインテリジェント端末があり、他のデバイスと通信するには特定のプロトコルが必要です。 "
"プロトコルの設計、ディスプレイの作成、ユーザインターフェイスの提供などのプロジェクトには数ヶ月かかることがあります。 機能仕様は1か月かかります。"
" 設計仕様書は1か月かかります。 コーディングは3ヶ月かかります。 統合とテストにはもう1か月かかります。"

#: ../../chapter2.rst:156
msgid ""
"This is the typical cycle. One project took almost two years, but six or "
"seven months is reasonable."
msgstr "これが典型的なサイクルです。あるプロジェクトは丸2年かかってしまいましたが、6、7ヶ月掛かるのは普通です。"

#: ../../chapter2.rst:159
msgid ""
"When we started with Forth five years ago, it wasn't like that. When I "
"received a functional specification, I just started coding. I used a "
"cross between top-down and bottom-up, generally defining a structure, and"
" as I needed it, some of the lower level, and then returning with more "
"structure."
msgstr ""
"私たちが5年前にForthを使い始めたときは、こんな感じではありませんでした。機能仕様を受け取ると、私はすぐにコーディングを始めました。私はトップダウンとボトムアップを交錯させながら、"
" 全体的な構造を定義し、それを必要に応じていくつか低レベルの、そしてより多くの構造を定義しました。"

#: ../../chapter2.rst:165
msgid ""
"The reason for that approach was the tremendous pressure to show "
"something to management. We wound up never writing down what we were "
"doing. Three years later we would go back and try to modify the code, "
"without any documentation. Forth became a disadvantage because it allowed"
" us to go in too early. It was fun to make the lights flash and disk "
"drives hum. But we didn't go through the nitty-gritty design work. As I "
"said, our \"free spirits\" have come back to haunt us."
msgstr ""
"そのアプローチの理由は、経営陣に何かを見せるなければいけないという大きな圧力でした。 "
"私たちはしていたことを書き留めることは決してありませんでした。 3年後、何もドキュメントなしでコードを修正しようとしました。 "
"それは私達にあまりにも早く作業すること許したために、Forthは不利になりました。 "
"ライトをチカチカさせたりディスクドライブがうなるのは楽しかったです。 しかし、私たちはすべきでないように見えた設計作業を行いませんでした。 "
"私が言ったように、私たちの「自由な精神」は私たちを悩ませるために戻ってきました。"

#: ../../chapter2.rst:173
msgid ""
"Now for the new programmers, we have an established requirement: a "
"thorough design spec that defines in detail all the high-level Forth "
"words---the tasks that your project is going to do. No more reading a few"
" pages of the functional specification, answering that, reading a few "
"more, answering that, etc."
msgstr "今では、新しいプログラマのために、私たちには確立された要件があります。あなたのプロジェクトが行おうとしてるタスク、つまり、定義する全てのハイレベルForthワードを詳細に網羅した設計仕様です。機能仕様を数ページも読んだり、それに答えたり、更に数ページ読んだり、それに答えたりすることはもう必要ありません。"

#: ../../chapter2.rst:179
msgid ""
"No living programmer likes to document. By ensuring the design ahead of "
"time, we're able to look back several years later and remember what we "
"did."
msgstr "生きているプログラマは誰も文書化するのを好みません。 設計を前もって確実にすることで、数年後でもかつて行ったことを思い出すことができます。"

#: ../../chapter2.rst:183
msgid ""
"I should mention that during the design phase there is some amount of "
"coding done to test out certain ideas. But this code may not be part of "
"the finished product. The idea is to map out your design."
msgstr ""
"設計段階では、特定のアイデアを試すためのコーディングがある程度行われていることに注意してください。 "
"しかし、このコードは完成品の一部ではないかもしれません。 そのアイデアはあなたの設計を描き出すためです。"

#: ../../chapter2.rst:187
msgid ""
"Johnson advises us to complete the design specification before starting "
"to code, with the exception of needed preliminary tests. The next "
"interview backs up this point, and adds some additional reasons."
msgstr ""
"ジョンソンは、必要な予備テストを除いて、コーディングを開始する前に設計仕様を完成させることを推奨しています。 "
"次のインタビューではこの点を取り上げ、そして幾つかの追加の理由を述べます。"

#: ../../chapter2.rst:228
msgid ""
"**John Teleska** has been an independent software consultant since 1976, "
"specializing in custom applications for academic research environments. "
"He enjoys providing research tools \"right at the edge of what technology"
" is able to do.\" Teleska works in Rochester, New York:"
msgstr ""
"**ジョン・テレスカ** は1976年から独立系ソフトウェアコンサルタントとして、学術研究環境向けのカスタムアプリケーションを専門としています。 "
"彼は「テクノロジーが不可能を可能にする正に最前線」で研究ツールを提供することを楽しんでいます。 "
"テレスカはニューヨーク州ロチェスターで働いています。"

#: ../../chapter2.rst:192
msgid ""
"I see the software development process as having two phases. The first is"
" making sure I understand what the problem is. The second is "
"implementation, including debugging, verification, etc."
msgstr ""
"私はソフトウェア開発プロセスは2つのフェイズがあると思います。 1つ目は、問題が何であるかを確実に理解することです。 "
"2つ目は、デバッグ、検証などを含む実装です。"

#: ../../chapter2.rst:196
msgid ""
"My goal in Phase One is an operational specification. I start with a "
"problem description, and as I proceed it becomes the operational "
"specification. My understanding of the problem metamorphoses into a "
"solution. The better the understanding, the more complete the solution. I"
" look for closure; a sense of having no more questions that aren't "
"answered in print."
msgstr "フェイズ1の私の目標は操作上の仕様です。私は問題の説明から始めます。そして進めるにつれてそれは操作上の仕様になります。問題の私の理解は解決策に変身します。より良い理解はより完全な解決策になります。私は、討論終結点を探ります。それは印刷物では答えられない質問がこれ以上無いと見て取ることです。"

#: ../../chapter2.rst:203
msgid ""
"I've found that on each project I've been putting more time into Phase "
"One, much to the initial dismay of many of my clients. The limiting "
"factor is how much I can convince the client it's necessary to spend that"
" time up front.  Customers generally don't know the specifications for "
"the job they want done. And they don't have the capital---or don't feel "
"they do---to spend on good specs. Part of my job is to convince them it "
"will end up costing more time and money not to."
msgstr ""
"私は、各プロジェクトでフェイズ1に時間をかけていることに気付きました。これは、私のクライアントの多くが最初はうろたえたことを意味します。限界要因はどのぐらいか、私はその時間を前もって費やす必要があることをクライアントに納得させることができます。顧客は一般的に彼らがやりたい仕事の仕様を知りません。そして、彼らは良い仕様に費やす為の資本を持ってない、あるいは彼らがそうしていているとは感じていません。"
" 私の仕事の一部は、彼らを納得させるためは、もっと多くの時間とお金を費やすことになると、まず彼らに納得させることです。"

#: ../../chapter2.rst:212
msgid ""
"Some of Phase One is spent on feasibility studies. Writing the spec "
"unearths uncertainties. I try to be as uncertain about uncertainties as "
"possible. For instance, they may want to collect 200,000 samples a second"
" to a certain accuracy. I first need to find out if it's even possible "
"with the equipment they've got. In this case I've got to test its "
"feasibility by writing a patch of code."
msgstr ""
"フェイズ1のいくつかは実現可能性の研究に費やされています。 仕様書を書くことは不確実性を明らかにします。 "
"私は不確実性についてはできる限り不確実なものとして試します。 たとえば、一定の精度で1秒間に200,000サンプルを収集したいとします。 "
"私は最初に彼らが持っている機器でもそれが可能であるかどうかを調べる必要があります。 "
"この場合、コードのパッチを書くことによってその実現可能性をテストする必要があります。"

#: ../../chapter2.rst:219
msgid ""
"Another reason for the spec is to cover myself. In case the application "
"performs to the spec but doesn't fully satisfy the customer, it's the "
"customer's responsibility. If the customer wants more, we'll have to "
"renegotiate. But I see it as the designer's responsibility to do whatever"
" is necessary to generate an operational specification that will do the "
"job to the customer's satisfaction."
msgstr ""
"仕様のもう一つの理由は私自身をカバーすることです。 アプリケーションが仕様どおりに機能しても顧客を完全には満足させない場合、それは顧客の責任です。"
" "
"顧客がもっと欲しいならば、我々は再交渉しなければならないでしょう。しかし、私はそれを設計者の責任であると考えています。それは、顧客の満足のいく仕事をするであろう操作上の仕様を生成するために必要なことは何でもすることです。"

#: ../../chapter2.rst:226
msgid ""
"I think there are consultants who bow to client pressure and limit the "
"time they spend on specs, for fear of losing the job. But in these "
"situations nobody ends up happy."
msgstr ""
"仕事を失うことを恐れて、クライアントの圧力に屈し、仕様に費やす時間を制限するコンサルタントがいると思います。 "
"しかし、このような状況では、だれも幸せにならない。"

#: ../../chapter2.rst:230
msgid "We’ll return to the Teleska interview momentarily."
msgstr "閑話休題。後でまたテレスカのインタビューに戻ります。"

#: ../../chapter2.rst:234
msgid "The Limitations of Planning"
msgstr "計画の限界"

#: ../../chapter2.rst:236
msgid ""
"Experience has taught us to map out where we’re going before we begin "
"coding. But planning has certain limitations. The following interviews "
"give different perspectives to the value of planning."
msgstr "コーディングを開始する前に、私たちはどこに向かっているか計画することを経験によって学びました。しかし計画には一定の制限があります。以下のインタビューでは計画の価値についてさまざまな見通しが示されています。"

#: ../../chapter2.rst:259
msgid ""
"Despite **Teleska** 's preference for a well-planned project, he suggests"
" that the choice between a top-down and bottom-up approach may depend on "
"the situation:"
msgstr ""
"**テレスカ** "
"の好みはよく計画されたプロジェクトですが、トップダウンとボトムアップのどちらのアプローチを選択するかは状況に依存するとほのめかしています。"

#: ../../chapter2.rst:241
msgid ""
"On two recent projects involving a lot of technical interface work, I did"
" the whole thing bottom-up. I milled around in a bunch of data-sheets and"
" technical descriptions of little crannies of the operating system I was "
"dealing with. I felt lost most of the time, wondering why I ever took the"
" job on.  Then finally I reached a critical mass of some sort and began "
"putting small programs together that made small things happen. I "
"continued, bottom-up, until I matched the target application."
msgstr ""
"多くの技術的なインターフェイス作業を含む最近の２つのプロジェクトでは、私は全部ボトムアップしました。私が扱っていたオペレーティングシステムの細かな部分のデータシートと技術的な説明の束を抱えて私はうろうろしました。"
" "
"時間のほとんどを浪費して、私はなぜこの仕事を請けたのだろうとさえ思いました。それからついに私はある種の限界質量(ある結果を得るために必要な量)に到達し、小さなことを実現させる小さなプログラムをまとめ始めました。"
" それから私はそれがターゲットアプリケーションと一致するまで、ボトムアップで続けました。"

#: ../../chapter2.rst:250
msgid ""
"My top-down sense was appalled at this procedure. But I've seen me go "
"through this process successfully too many times to discount it for any "
"pedagogical reasons. And there is always this difficult phase which it "
"seems no amount of linear thinking will penetrate. Programming seems a "
"lot more intuitive than we, in this business, tell each other it ought to"
" be."
msgstr "私の、トップダウンに慣れた感覚からすると、この手順はぎょっとするものでした。しかし、教育的な理由によるものを割り引いてみても、私はこのプロセスで何度も成功を経験しました。そしていつも、たくさん直線的思考をしないと突破できないように見える、この困難なフェイズがあるように思えます。このビジネスでは、プログラミングは、お互いにが当然すべきであるとすることより、もっと直感的に思えます。"

#: ../../chapter2.rst:257
msgid ""
"I think if the application elicits this sense of being lost, I proceed "
"bottom-up. If the application is in familiar territory then I'll probably"
" use a more traditional by-the-book approach."
msgstr "アプリケーションがこの失われた感覚を引き出すと私が考えるなら、私はボトムアップで進めます。アプリケーションがおなじみの領域にある場合は、私はおそらく伝統的な書籍によるアプローチを使用します。"

#: ../../chapter2.rst:261
msgid "And here’s another view:"
msgstr "そして、以下もまた別の見方です。"

#: ../../chapter2.rst:264
msgid ""
"At the time I interviewed him, Michael Starling of Union Carbide was "
"putting the final touches on two applications involving user-configurable"
" laboratory automation and process control automation systems. For the "
"pilot plant system, Starling designed both the hardware and software to "
"known requirements; on the laboratory automation system he also defined "
"the requirements himself."
msgstr ""
"私が彼にインタビューした時には、ユニオン・カーバイドのマイケル・スターリングは、ユーザが設定できるラボ自動化とプロセス制御自動化システムを含む2つのアプリケーション上で最後の仕上げを行っていました。"
" パイロットプラントシステムのために、スターリングは、既知の要件のためにハードウェアとソフトウェアの両方を設計しました。 "
"ラボ自動化システムでは、彼自身も要件を定義しました。"

#: ../../chapter2.rst:271
msgid ""
"His efforts were extremely successful. On one project, the new system "
"typically costs only 20\\% as much as the equivalent system and requires "
"days, instead of months, to install and configure."
msgstr ""
"彼の努力は大成功でした。 "
"あるプロジェクトでは、新しいシステムのコストは同等システムのわずか20％で、インストールと設定には数か月ではなく数日で済みました。"

#: ../../chapter2.rst:275
msgid "I asked him what techniques of project management he employed."
msgstr "私は彼が採用したプロジェクト管理テクニックはどのようなものなのか尋ねました。"

#: ../../chapter2.rst:277
msgid ""
"On both of these projects much design was needed. I did not follow the "
"traditional analysis methods, however. I did employ these steps:"
msgstr "どちらのプロジェクトでも多くの設計が必要でした。しかし私は伝統的な分析手法には従いませんでした。私は以下のステップを採用しました。"

#: ../../chapter2.rst:280
msgid "First, I clearly defined the boundaries of the problem."
msgstr "第一に、問題の境界を明確にしました。"

#: ../../chapter2.rst:282
msgid ""
"Second, I determined what the smaller functional pieces, the software "
"subsystems, had to be."
msgstr "第二に、小さな機能部分であるソフトウェアサブシステムがどうあるべきかを決めました。"

#: ../../chapter2.rst:285
msgid "Third, I did each piece, put them together, and the system ran."
msgstr "第三に、私は各部品を作り、それらをまとめると、システムが走りました。"

#: ../../chapter2.rst:287
msgid ""
"Next, I asked the users \"Does this meet your requirements?\" Sometimes "
"it didn't, and in ways that neither the users nor the specification "
"designers could have anticipated."
msgstr ""
"次に、私はユーザに「これはあなたの要求を満たしていますか？」と尋ねました。 "
"時々はユーザも仕様設計者も予想できなかった理由で要求を満たせていませんでした。"

#: ../../chapter2.rst:291
msgid ""
"For instance, the designers didn't realize that the original "
"specification wouldn't produce pleasing, human-oriented graphics "
"displays. After working with the interactive graphics on the first "
"version, users were applying arbitrary scales and coming up with oddball "
"displays."
msgstr "例えば、設計者は、元の使用では人を対象とした快適なグラフィックディスプレイを作成できないことに気付きませんでした。最初のバージョンでインタラクティブグラフィックを使って作業した後、ユーザは任意なスケールの適用と奇天烈な表示装置を見せてきました。"

#: ../../chapter2.rst:297
msgid ""
"So even after the basic plot algorithm was designed, we realized we "
"needed auto-scaling. We went back in and analyzed how human beings plot "
"data and wrote a first level plot function that evaluates the x and y "
"data and how much will fit on the graph."
msgstr "そのため、基本的なプロットアルゴリズムの設計後に自動スケーリングが必要なことが判りました。私たちは開発の前の段階に戻って、人間がどのようにデータをプロットするのかを分析し、xとyのデータを評価し、グラフにどれだけ収まるかを評価する第一レベルのプロット機能を書きました。"

#: ../../chapter2.rst:302
msgid ""
"After that, we realized that not all the data taken will be of interest "
"to experimenters. So we added a zoom capability."
msgstr "その後、私たちは、得られたデータ全てが実験者にとって興味を惹く訳ではないことに気付きました。そこで、私たちはズーム機能を追加しました。"

#: ../../chapter2.rst:305
msgid ""
"This iterative approach resulted in cleaner code and better thought out "
"code. We established a baseline set of goals and built a minimal system "
"to the users' known requirements. Then we'd crank in the programmer's "
"experience to improve it and determine what the users forgot they needed "
"when they generated the specs."
msgstr ""
"この反復的なアプローチにより、コードがよりきれいになり、コードをよりよく考え出すことができました。 "
"基本的な目標を設定し、ユーザの既知の要件に合わせて最小限のシステムを構築しました。それから、私たちはプログラマの経験により、改良したり、仕様作成時にユーザが必要なのに忘れていたもの確認したりします。"

#: ../../chapter2.rst:311
msgid ""
"The users did not invent most of the new ideas. The programmers did, and "
"they would bounce these ideas off the users. The problem definition was a"
" two-way street. In some cases they got things they didn't know they "
"could do on such a small computer, such as applying digital filters and "
"signal processing to the data."
msgstr ""
"ユーザは新しいアイデアのほとんどを発明しませんでした。 プログラマはそうしました、そして、彼らはユーザからこれらの考えを跳ね返すでしょう。 "
"問題の定義は双方向でした。 "
"場合によっては、そのような小型コンピュータでは、デジタルフィルタの適用やデータへの信号処理などは実行できないことがわかっていました。"

#: ../../chapter2.rst:317
msgid ""
"One of the things about Forth that makes this approach possible is that "
"primitives are easily testable. It takes some experience with Forth to "
"learn how to take advantage of this. Guys from traditional environments "
"want to write ten pages of code at their desk, then sit down to type it "
"in and expect it to work."
msgstr ""
"Forthがこのアプローチを可能にするのは、プリミティブが簡単にテスト可能であるということです。 "
"これを利用する方法を学ぶには、Forthでの何らかの経験が必要です。 "
"従来の環境の人たちは、コーディング用紙で10ページのコードを書き、それかおもむろにそれをタイプインしてそれが機能することを期待しています。"

#: ../../chapter2.rst:323
msgid ""
"To summarize my approach: I try to find out from the users what they "
"need, but at the same time recognizing its incompleteness. Then I keep "
"them involved in the design during the implementation, since they have "
"the expertise in the application.  When they see the result, they feel "
"good because they know their ideas were involved."
msgstr ""
"私のアプローチを要約します。私はユーザから、ユーザ必要とするものを見つけることを試みるが、同時にその不完全性を認識することを試みる。 "
"それから、ユーザがアプリケーションの業務知識を持っているので、ユーザには実装の間、設計に関わってもらいます。 "
"ユーザが結果を見たとき、ユーザは自分たちの考えが関わっていることを知っているので、気分が良い。"

#: ../../chapter2.rst:329
msgid ""
"The iterative approach places highest value on producing a good solution "
"to the real problem. It may not always give you the most predictable "
"software costs. The route to a solution may depend upon your priorities. "
"Remember:"
msgstr ""
"反復アプローチは、実際の問題に対する優れた解決策を生み出すことに最大の価値を置きます。 "
"そのソフトウェアのコストが予測可能とは限りません。解決策への道はあなたの優先順位に依存するかもしれません。 覚えておいてください。"

#: ../../chapter2.rst
msgid "Good"
msgstr "良い"

#: ../../chapter2.rst
msgid "Fast"
msgstr "速い"

#: ../../chapter2.rst
msgid "Cheap"
msgstr "安い"

#: ../../chapter2.rst:338
msgid "Pick any two!"
msgstr "どれか２つを選んでね！"

#: ../../chapter2.rst:340
msgid ""
"As Starling observes, you don’t know completely what you’re doing till "
"you’ve done it once. In my own experience, the best way to write an "
"application is to write it twice. Throw away the first version and chalk "
"it up to experience."
msgstr "スターリングの考察のように、自身で完全にやってみるまで、あなた自身がしていることを完全には知りません。私自身の経験では、アプリケーションを書くための最良の方法はそれを２回書くことです。最初のバージョンを捨て、そしてその経験を記録します。"

#: ../../chapter2.rst:356
msgid ""
"**Peter Kogge** is Senior Technical Staff in the IBM Federal Systems "
"Division, Oswego, New York:"
msgstr "**ペーター・コゲ** は、ニューヨーク州オズウィーゴにあるIBM連邦システム事業部のシニアテクニカルスタッフです。"

#: ../../chapter2.rst:347
msgid ""
"One of the key advantages I find in Forth is that it allows me to very "
"quickly prototype an application without all the bells and whistles, and "
"often with significant limitations, but enough to wring out the \"human "
"interface\" by hands-on trial runs."
msgstr "私が見つけたForthの利点の一つは、ごたごたせずに非常に素早くアプリケーションを試作できることです。それは多くの場合、大きな制限がありますが、実地に試しに走らせて「ヒューマン・インターフェイス」を引き出すのには充分です。"

#: ../../chapter2.rst:352
msgid ""
"When I build such a prototype, I do so with the firm constraint that I "
"will use not a single line of code from the prototype in the final "
"program. This enforced \"do-over\" almost always results in far simpler "
"and more elegant final programs, even when those programs are written in "
"something other than Forth."
msgstr "私がこのように試作するときは、最終プログラムでは、試作のコードを単一行で使わないという強い制約のもとに作成します。これらのプログラムがForth以外で書かれている場合でも、この強制された「作り直し」は、ほとんどいつも、はるかに単純でより洗練された最終プログラムをもたらす。"

#: ../../chapter2.rst:358
msgid ""
"Our conclusions? In the Forth environment planning is necessary. But it "
"should be kept short. Testing and prototyping are the best ways to "
"discover what is really needed."
msgstr "私たちの結論は何でしょうか。Forthでは環境計画は必要です。しかしそれは短く保っておくべきです。テストと試作は本当に必要なものを発見する最良の方法です。"

#: ../../chapter2.rst:362
msgid ""
"A word of caution to project managers: If you’re supervising any "
"experienced Forth programmers, you won’t have to worry about them "
"spending too much time on planning. Thus the following tip has two "
"versions:"
msgstr ""
"プロジェクトマネージャへの注意事項：もし、経験豊富なForthプログラマを監督しているのなら、計画に時間をかけすぎることを心配する必要はありません。"
" したがって、以下の「ヒント」には2つのバージョンがあります。"

#: ../../chapter2.rst:369
msgid ""
"For newcomers to Forth (with \"traditional\" backgrounds): Keep the "
"analysis phase to a minimum."
msgstr "(「伝統的」な開発手法の経験のある）Forth初心者の場合、分析フェイズを最小限に抑えてください。"

#: ../../chapter2.rst:372
msgid ""
"For Forth addicts (without a \"traditional\" background): Hold off on "
"coding as long as you can possibly stand it."
msgstr "（伝統的な開発手法経験の無い）Forth常用者の場合、あなたが耐えられる限りコーディングを延期して下さい。"

#: ../../chapter2.rst:375
msgid "Or, as we observed in :doc:`Chapter One<chapter1>`:"
msgstr "または、:doc:`第１章<chapter1>` で観察したように、"

#: ../../chapter2.rst:379
msgid "Plan for change (by designing components that can be changed)."
msgstr "（変更可能なコンポーネントを設計することによって）変更を計画する"

#: ../../chapter2.rst:381
msgid "Or, simply:"
msgstr "または、シンプルに、"

#: ../../chapter2.rst:385
msgid "Prototype."
msgstr "試作する"

#: ../../chapter2.rst:388
msgid "The Analysis Phase"
msgstr "分析フェイズ"

#: ../../chapter2.rst:390
msgid ""
"In the remainder of this chapter we’ll discuss the analysis phase. "
"Analysis is an organized way of understanding and documenting what the "
"program should do."
msgstr "この章の残りの部分では、分析フェイズについて説明します。 分析とは、プログラムが何をすべきかを理解し文書化する体系的な方法です。"

#: ../../chapter2.rst:395
msgid ""
"With a simple program that you write for yourself in less than an hour, "
"the analysis phase may take about 250 microseconds. At the other extreme,"
" some projects will take many man-years to build. On such a project, the "
"analysis phase is critical to the success of the entire project."
msgstr ""
"あなたが1時間もかからずに書く簡単なプログラムでは、分析段階は約250マイクロ秒なのかもしれません。 "
"反対に、プロジェクトによっては構築に多大な人月を要するものもあります。 "
"そのようなプロジェクトでは、分析フェイズはプロジェクト全体の成功にとって重要です。"

#: ../../chapter2.rst:401
msgid "We’ve indicated three parts to the analysis phase:"
msgstr "分析フェイズには３つの部分があります。"

#: ../../chapter2.rst:403
msgid "Discovering the requirements and constraints"
msgstr "要件と制約の発見"

#: ../../chapter2.rst:405
msgid "Building a conceptual model of the solution"
msgstr "解決策の概念モデルの構築"

#: ../../chapter2.rst:407
msgid "Estimating cost, scheduling, and performance"
msgstr "コスト・スケジュール・性能の見積もり"

#: ../../chapter2.rst:409
msgid "Let’s briefly describe each part:"
msgstr "では、各部分の簡単な説明を見てみましょう。"

#: ../../chapter2.rst:412
msgid "Discovering the Requirements"
msgstr "要求の発見"

#: ../../chapter2.rst:414
msgid ""
"The first step is to determine what the application should do. The "
"customer, or whoever wants the system, should supply a “requirements "
"specification.” This is a modest document that lists the minimum "
"capabilities for the finished product."
msgstr ""
"最初のステップは、アプリケーションが何をすべきかを決めることです。 "
"顧客、またはシステムを望む人は誰でも、「要求仕様」を提供するべきです。これは完成品の最低限の機能を一覧にしたささやかな文書です。"

#: ../../chapter2.rst:419
msgid ""
"The analyst may also probe further by conducting interviews and sending "
"out questionnaires to the users."
msgstr "また、分析者はインタビューを実施し、ユーザにアンケートを送付することによってさらに調査することができます。"

#: ../../chapter2.rst:424
msgid "Discovering the Constraints"
msgstr "制約の発見"

#: ../../chapter2.rst:426
msgid ""
"The next step is to discover any limiting factors. How important is "
"speed? How much memory is available? How soon do you need it?"
msgstr "次のステップは、あらゆる制限要因を発見することです。スピードはどのぐらい重要ですか？利用可能なメモリはどのぐらいですか？納期はどのぐらいですか？"

#: ../../chapter2.rst:429
msgid ""
"No matter how sophisticated our technology becomes, programmers will "
"always be bucking limitations. System capacities inexplicably diminish "
"over time. The double-density disk drives that once were the answer to my"
" storage prayers no longer fill the bill. The double-sided, double-"
"density drives I’ll get next will seem like a vast frontier—for a while. "
"I’ve heard guys with 10-megabyte hard disks complain of feeling cramped."
msgstr ""
"テクノロジーがどんなに高度であっても、プログラマはいつも限界に立ち向かう事になるでしょう。システムの容量は時間の経過とともに不思議にな減少をします。"
" かつて私のストレージへの願いに答えていた倍密度フロッピーディスクドライブは、もはや要求を満たすことはできません。 "
"私が次に手にするだろう両面倍密度フロッピーディスクドライブは、しばらくの間だけは、広大なフロンティアのように思えるでしょう。10メガバイトのハードディスクを持っている人たちが窮屈な気分を訴えているのを聞いたこともあります。"

#: ../../chapter2.rst:437
msgid ""
"Whenever there’s a shortage of something—and there always will "
"be—tradeoffs have to be made. It’s best to use the analysis phase to "
"anticipate most limitations and decide which tradeoffs to make."
msgstr "何か不足する都度、トレードオフの必要があります。そしてそれはいつも起こるのです。制約のほとんどを予測しトレードオフをなすためには分析フェイズを用いるのが最善です。"

#: ../../chapter2.rst:441
msgid ""
"On the other hand, you should *not* consider other types of constraints "
"during analysis, but should instead impose them gradually during "
"implementation, the way one stirs flour into gravy."
msgstr "一方、分析中は他の種類の制約を考慮しないで下さい。代わりに、実装時に徐々に制約を課すようにしてください。"

#: ../../chapter2.rst:445
msgid ""
"The type of constraint to consider during analysis includes those that "
"might affect the overall approach. The type to defer includes those that "
"can be handled by making iterative refinements to the planned software "
"design."
msgstr ""
"分析中に考慮する制約の種類には、全体的なアプローチに影響を与える可能性がある制約が含まれます。 "
"延期する種類には、ソフトウェア設計計画で反復改良することによって処理できるものが含まれます。"

#: ../../chapter2.rst:450
msgid ""
"As we heard in our earlier interviews, finding out about *hardware* "
"constraints often requires writing some test code and trying things out."
msgstr "以前のインタビューで聞いたように、*ハードウェア* の制約について知るには、テストコードを書いて試してみることがよくあります。"

#: ../../chapter2.rst:454
msgid ""
"Finding out about the *customer’s* constraints is usually a matter of "
"asking the customer, or of taking written surveys. “How fast do you need "
"such-and-such, on a scale of one to ten?”, etc."
msgstr ""
"*顧客* の制約について知るには、通常、顧客に尋ねるか、または、書面による調査を行います。 "
"「1〜10の尺度で、どれだけ早くそのようなものが必要ですか？」などなど。"

#: ../../chapter2.rst:461
msgid "Building a Conceptual Model of the Solution"
msgstr "解決策の概念モデルの構築"

#: ../../chapter2.rst:463
msgid ""
"A conceptual model is an imaginary solution to the problem. It is a view "
"of how the system *appears* to work. It is an answer to all the "
"requirements and constraints."
msgstr ""
"概念モデルは、問題に対する架空の解決策です。 それはシステムがどのように動作するように見えるかの観察です。 "
"それは、すべての要件と制約に対する答えです。"

#: ../../chapter2.rst:472
msgid "Refining the conceptual model to meet requirements and constraints."
msgstr "要件と制約を満たすよう概念モデルを改良"

#: ../../chapter2.rst:476
msgid ""
"If the requirements definition is for “something to stand on to paint the"
" ceiling,” then a description of the conceptual model is “a device that "
"is free-standing (so you can paint the center of the room), with several "
"steps spaced at convenient intervals (so you can climb up and down), and "
"having a small shelf near the top (to hold your paint can).”"
msgstr "要件の定義が「天井を塗装するために立つための何か」である場合、概念モデルの説明は「自立型（つまり、部屋の中央で塗装することができます）の装置で、使いやすい間隔の幾つかのステップ（あなたが昇降することできます）、てっぺんの近くに小さな棚がある（塗料缶を置くため）、です。"

#: ../../chapter2.rst:482
msgid ""
"A conceptual model is not quite a design, however. A design begins to "
"describe how the system *really* works. In design, the image of a step "
"ladder would begin to emerge."
msgstr "概念モデルは全然設計されていません。設計は、システムが実際にどのように動作する説明し始めます。設計していくと脚立のイメージが出始めます。"

#: ../../chapter2.rst:486
msgid ""
"Forth blurs the distinction a little, because all definitions are written"
" in conceptual terms, using the lexicons of lower level components. In "
"fact, later in this chapter we’ll use Forth “pseudocode” to describe "
"conceptual model solutions."
msgstr ""
"すべての定義は概念的な言葉で書かれており、下位レベルのコンポーネントの用語集を使用しているため、Forthは区別を少しあいまいにします。 "
"実際、この章の後半では、概念モデルの解決策を説明するためにForthの「擬似コード」を使用します。"

#: ../../chapter2.rst:491
msgid ""
"Nevertheless, it’s useful to make the distinction. A conceptual model is "
"more flexible than a design. It’s easier to fit the requirements and "
"constraints into the model than into a design."
msgstr "それでも、区別することは有用です。 概念モデルはデザインよりも柔軟性があります。 設計よりモデルに要件と制約を適合させる方が簡単です。"

#: ../../chapter2.rst:497
msgid "Strive to build a solid conceptual model before beginning the design."
msgstr "設計を始める前に、しっかりした概念モデルを構築するようにしてください。"

#: ../../chapter2.rst:499
msgid ""
"Analysis consists of expanding the requirements definition into a "
"conceptual model. The technique involves two-way communication with the "
"customer in successive attempts to describe the model."
msgstr "分析とは、要件定義の概念モデルへの拡張です。これには、モデル記述のための連続した試行における、顧客との双方向コミュニケーションを含みます。"

#: ../../chapter2.rst:504
msgid ""
"Like the entire development cycle, the analysis phase is best approached "
"iteratively. Each new requirement will tend to suggest something in your "
"mental model. Your job is to juggle all the requirements and constraints "
"until you can weave a pattern that fits the bill."
msgstr "開発サイクル全体と同様に、分析フェイズは反復的にアプローチするのが最善です。それぞれの新しい要求はあなたの頭の中で何かを提案してくる傾向があります。あなたの仕事は、要求にフィットできるまですべての要件と制約を調整することです。"

#: ../../chapter2.rst:513
msgid "An iterative approach to analysis."
msgstr "分析のための反復的アプローチ"

#: ../../chapter2.rst:517
msgid ""
":numref:`fig2-2`  illustrates the iterative approach to the analysis "
"phase. The final step is one of the most important: show the documented "
"model to the customer. Use whatever means of communication are "
"necessary—diagrams, tables, or cartoons—to convey your understanding to "
"the customer and get the needed feedback. Even if you cycle through this "
"loop a hundred times, it’s worth the effort."
msgstr ""
":numref:`fig2-2` は分析フェイズのための反復的アプローチを表しています。 "
"最後のステップは最も重要なものの1つです。それは文書化されたモデルを顧客に見せることです。 "
"あなたの理解を顧客に伝え、必要なフィードバックを得るために必要なコミュニケーション手段（図、表、または漫画）を使用してください。 "
"この繰り返しを100回繰り返すことになっても努力する価値はあります。"

#: ../../chapter2.rst:524
msgid ""
"In the next three sections we’ll explore three techniques for defining "
"and documenting the conceptual model:"
msgstr "以下の3つの節では、概念モデルを定義し文書化するための3つの手法を探ります。"

#: ../../chapter2.rst:527
msgid "defining the interfaces"
msgstr "インターフェイスの定義"

#: ../../chapter2.rst:529
msgid "defining the rules"
msgstr "ルールの定義"

#: ../../chapter2.rst:531
msgid "defining the data structures."
msgstr "データ構造の定義"

#: ../../chapter2.rst:534
msgid "Defining the Interfaces"
msgstr "インターフェイスの定義"

#: ../../chapter2.rst:538
msgid ""
"First, and most importantly, the conceptual model should describe the "
"system's interfaces."
msgstr "最初に、そして最も重要なこととして、概念モデルはシステムのインターフェースを記述するべきです。"

#: ../../chapter2.rst:581
msgid "Teleska:"
msgstr "テレスカは言います。"

#: ../../chapter2.rst:542
msgid ""
"The \"spec\" basically deals with WHAT. In its most glorious form, it "
"describes what the system would look like to the user---you might call it"
" the user's manual. I find I write more notes on the human interaction---"
"what it will look like on the outside---than on the part that gets the "
"job done. For instance, I'll include a whole error-action listing to show"
" what happens when a particular error occurs. Oddly, this is the part "
"that takes the most time to implement anyway."
msgstr ""
"「仕様」は基本的には「何か」を扱います。そのもっともすばらしい形で、それはシステムがユーザにどのように見えるかを説明します。あなたはそれをユーザマニュアルと呼ぶかもしれません。私は内部の仕事を成し遂げる部分よりも、外側から見える人間との対話について多くのメモを残しているのが判ります。たとえば、特定のエラーが発生したときに何が起こるかを示すために、エラーアクションリスト全体を含めます。"
" 不思議なことに、これはとにかく実装に最も時間がかかる部分です。"

#: ../../chapter2.rst:551
msgid ""
"I'm currently working on a solid-state industrial washing-machine timer. "
"In this case, the user interface is not that complex. What is complex is "
"the interface to the washing machine, for which I must depend on the "
"customer and the documentation they can provide."
msgstr ""
"私は現在、半導体工業用洗浄機のタイマーに取り組んでいます。 この場合、ユーザインターフェイスはそれほど複雑ではありません。 "
"複雑なのは洗浄機へのインターフェースで、私は顧客と彼らが提供できる文書に頼らなければなりません。"

#: ../../chapter2.rst:556
msgid ""
"The significant interface is whatever is the arms and legs of the "
"product. I don't make the distinction between hardware and software at "
"this early stage. They can be interchanged in the implementation."
msgstr ""
"重要なインターフェースは何であれ製品の手足です。 初期の段階では、ハードウェアとソフトウェアを区別しません。 "
"それらは実装の段階で入れ替えることができます。"

#: ../../chapter2.rst:560
msgid ""
"The process of designing hardware and the process of designing software "
"are analogous. The way I design hardware is to treat it as a black box. "
"The front panel is input and output. You can do the same with software."
msgstr ""
"ハードウェアを設計するプロセスとソフトウェアを設計するプロセスは類似しています。 "
"私がハードウェアを設計する方法は、それをブラックボックスとして扱うことです。 前面パネルは入出力です。 ソフトウェアも同様にできます。"

#: ../../chapter2.rst:565
msgid ""
"I use any techniques, diagrams, etc., to show the customer what the "
"inputs and outputs look like, using his description of what the product "
"has to do.  But in parallel, in my own mind, I'm imagining how it will be"
" implemented.  I'm evaluating whether I can do this efficiently. So to me"
" it's not a black box, it's a gray box. The designer must be able to see "
"inside the black boxes."
msgstr ""
"私は、製品が為すすべきことの説明を使用して、入力と出力がどのように見えるかを顧客に示すため、にあらゆるテクニック、図表などを利用します。 "
"しかし並行して、私自身の頭の中では、それがどのように実装されるかを想像しています。 効率的にできるかどうかを評価しています。 "
"だから私にはブラックボックスではなく、グレーのボックスです。 設計者はブラックボックスの内側を見ることができなければなりません。"

#: ../../chapter2.rst:572
msgid ""
"When I design a system that's got different modules, I try to make the "
"coupling as rational and as little as possible. But there's always give "
"and take, since you're compromising the ideal."
msgstr "別個のモジュールを使ったシステムを設計するときは、連結が合理的かつ可能な限り少なくするようにします。あなたは理想を危うくしていますが、しかし、常にギブ＆テイクはあるものです。"

#: ../../chapter2.rst:576
msgid ""
"For the document itself, I use DFDs [data-flow diagrams, which we'll "
"discuss later], and any other kind of representation that I can show to "
"my client. I show them as many diagrams as I can to clarify my "
"understanding.  I don't generally use these once it comes to "
"implementation. The prose must be complete, even without reference to the"
" diagrams."
msgstr ""
"文書には、DFD（データフロー図、後で説明します）、および顧客に提示できるその他の表現を使用します。 "
"理解を明確にするために、できるだけ多くの図を提示しています。 実装になると、私は一般的にこれらを使用しません。 "
"図表を参照せずとも、文章は完全でなければなりません。"

#: ../../chapter2.rst:585
msgid ""
"Decide on error- and exception-handling early as part of defining the "
"interface."
msgstr "インタフェースの定義の一部として、エラー処理と例外処理を早期に決定してください。"

#: ../../chapter2.rst:588
msgid ""
"It’s true that when coding for oneself, a programmer can often "
"concentrate first on making the code run correctly under *normal* "
"conditions, then worry about error-handling later. When working for "
"someone else, however, error-handling should be worked out ahead of time."
" This is an area often overlooked by the beginning programmer."
msgstr ""
"コーディングするとき、プログラマはまず「正常」な条件下でコードを正しく実行することに集中し、その後でエラー処理について心配することがよくあります。"
" しかし、誰かのために働くときは、エラー処理は前もって解決されるべきです。 これは初心者プログラマが見過ごしてしまいやすい分野です。"

#: ../../chapter2.rst:595
msgid ""
"The reason it’s so important to decide on error-handling at this stage is"
" the wide divergence in how errors can be treated. An error might be:"
msgstr "この段階でエラー処理を決定する事がそんなに重要な理由はどのようにエラーを扱うかが広範囲に渡るためです。以下のエラーが発生するかもしれません。"

#: ../../chapter2.rst:598
msgid "ignored"
msgstr "無視"

#: ../../chapter2.rst:600
msgid ""
"made to set a flag indicating that an error occurred, while processing "
"continues"
msgstr "エラーが発生した事を示すフラグがセットされているのに処理を続行"

#: ../../chapter2.rst:603
msgid "made to halt the application immediately"
msgstr "アプリケーションがアボート"

#: ../../chapter2.rst:605
msgid ""
"designed to initiate procedures to correct the problem and keep the "
"program running."
msgstr "問題を正としてプロシージャを開始し、プログラムを実行し続けるような設計"

#: ../../chapter2.rst:608
msgid ""
"There’s room for a serious communications gap if the degree of complexity"
" required in the error-handling is not nailed down early. Obviously, the "
"choice bears tremendous impact on the design and implementation of the "
"application."
msgstr ""
"早い段階でエラー処理がどの程度複雑かはっきりさせないと、プロジェクトチーム内で深刻なコミュニケーションのギャップが生じる可能性があります。 "
"明らかに、この選択はアプリケーションの設計と実装に多大な影響を与えます。"

#: ../../chapter2.rst:616
msgid ""
"Develop the conceptual model by imagining the data traveling through and "
"being acted upon by the parts of the model."
msgstr "データが通過して、モデルの各部分が実行されるのを想像して概念モデルをを開発します。"

#: ../../chapter2.rst:619
msgid ""
"A discipline called *structured analysis* [weinberg80]_ offers some "
"techniques for describing interfaces in ways that your clients will "
"easily understand. One of these techniques is called the “data-flow "
"diagram” (DFD), which Teleska mentioned."
msgstr ""
"「構造化分析」 [weinberg80]_ "
"と呼ばれる分野では、顧客が理解しやすい方法でインターフェースを記述するためのいくつかの技法を提供しています。 "
"これらの手法の1つが、テレスカが言及した「データフロー図」（DFD）です。"

#: ../../chapter2.rst:629
msgid "A data-flow diagram."
msgstr "データフロー図"

#: ../../chapter2.rst:633
msgid ""
"A data-flow diagram, such as the one depicted in :numref:`fig2-3` , "
"emphasizes what happens to items of data as they travel through the "
"system. The circles represent “transforms,” functions that act upon "
"information. The arrows represent the inputs and outputs of the "
"transforms."
msgstr ""
":numref:`fig2-3` のように描かれるデータフロー図は、データ項目がシステム内をめぐるときに何が起こるかを強調します。 "
"円は「変換」を表し、情報に基づいて機能します。 矢印は変換の入力と出力を表します。"

#: ../../chapter2.rst:639
msgid ""
"The diagram depicts a frozen moment of the system in action. It ignores "
"initialization, looping structures, and other details of programming that"
" relate to time."
msgstr "この図は、動作中のシステムのとある瞬間を表しています。 初期化、ループ構造、およびその他時間の流れが絡む詳細は無視されます。"

#: ../../chapter2.rst:643
msgid "Three benefits are claimed for using DFDs:"
msgstr "DFDを使用すると、以下の3つの利点があります。"

#: ../../chapter2.rst:645
msgid ""
"First, they speak in simple, direct terms to the customer. If your "
"customer agrees with the contents of your data-flow diagram, you know you"
" understand the problem."
msgstr "第一に、その図はシンプルで直接的な言葉で顧客に語ります。 顧客があなたのデータフロー図の内容に同意すれば、あなたは問題を理解していると言えます。"

#: ../../chapter2.rst:649
msgid ""
"Second, they let you think in terms of the logical “whats,” without "
"getting caught up in the procedural “hows,” which is consistent with the "
"philosophy of hiding information as we discussed in the last chapter."
msgstr "第２に、それはあなたに、手続き的に「どのようにするか」に巻き込まれずに、論理的に「何か」という観点から考えさせます。これは前の章で説明したように、情報隠蔽の哲学と一致します。"

#: ../../chapter2.rst:653
msgid ""
"Third, they focus your attention on the interfaces to the system and "
"between modules."
msgstr "第３に、それらはシステムへのインターフェースとモジュール間のインターフェースにあなたの注意を集中させます。"

#: ../../chapter2.rst:656
msgid ""
"Forth programmers, however, rarely use DFDs except for the customer’s "
"benefit. Forth encourages you to think in terms of the conceptual model, "
"and Forth’s implicit use of a data stack makes the passing of data among "
"modules so simple it can usually be taken for granted. This is because "
"Forth, used properly, approaches a functional language."
msgstr ""
"しかし、Forthプログラマは、顧客の便宜を図る時を除いてDFDを使用することはめったにありません。 "
"Forthは概念モデルの観点から考えることを奨励し、Forthが暗黙的にデータスタックを使用することで、モジュール間でのデータの受け渡しが非常に簡単になり、通常は当然のことと考えられます。"
" これは、適切に使用されているForthが関数型言語に近づいているためです。"

#: ../../chapter2.rst:663
msgid ""
"For anyone with a few days’ familiarity with Forth, simple definitions "
"convey at least as much meaning as the diagrams:"
msgstr "Forthに数日も触った人なら、シンプルな定義は図と同じくらい分かりやすいです。"

#: ../../chapter2.rst:676
msgid ""
"This is Forth pseudocode. No effort has been made to determine what "
"values are actually passed on the stack, because that is an "
"implementation detail. The stack comment for ``REQUEST`` is used only to "
"indicate the two items of data needed to initiate the process."
msgstr ""
"これはForth擬似コードです。 どの値が実際にスタックに渡されるかを決定するための努力はなされていません。なぜなら、それは実装の詳細だからです。"
" ``REQUEST`` のスタックコメントは、プロセスを開始するのに必要な2つのデータ項目を示すためだけに使われています。"

#: ../../chapter2.rst:681
msgid ""
"(If I were designing this application, I’d suggest that the user "
"interface be a word called ``NEED``, which has this syntax:"
msgstr ""
"（私がこのアプリケーションを設計していたならば、私はユーザインターフェースには ``NEED`` "
"というワードがよいと思います。これは以下の文法を持ちます。"

#: ../../chapter2.rst:690
msgid ""
"``NEED`` converts the quantity into a numeric value on the stack, "
"translates the string ``AXLES`` into a part number, also on the stack, "
"then calls ``REQUEST``. Such a command should be defined only at the "
"outer-most level.)"
msgstr ""
"``NEED`` は数量を数値に変換しスタックに置き、文字列 ``AXLES`` も部品番号に変換してスタックに置きます。そして、 "
"``REQUEST`` を呼び出します。このようなコマンドは最も外側のレベルでのみ定義されるべきです。）"

#: ../../chapter2.rst:703
msgid "Johnson of Moore Products Co. has a few words on Forth pseudocode:"
msgstr "ムーアプロダクツ社のジョンソンがForth疑似コードについて少々。"

#: ../../chapter2.rst:696
msgid ""
"IBM uses a rigorously documented PDL (program design language). We use a "
"PDL here as well, although we call it FDL, for Forth design language. "
"It's probably worthwhile having all those standards, but once you're "
"familiar with Forth, Forth itself can be a design language. You just have"
" to leave out the so-called \"noise\" words: ``C@``, ``DUP``, ``OVER``, "
"etc., and show only the basic flow. Most Forth people probably do that "
"informally. We do it purposefully."
msgstr ""
"IBMでは厳密に文書化されたPDL(プログラム設計言語)を使用します。 "
"私たちはここでもPDLを使います(なお、Forth設計言語ではFDLと呼びます)。これらの標準全ては持つ価値があるが、一度あなたがForthに慣れたら、Forth自身を設計言語にすることができます。あなたはForth設計言語から「ノイズ」と言われるワード、つまり"
" ``C@``, ``DUP``, ``OVER``, "
"等を省く必要があります。そして基本的な流れだけを表します。殆どのForth人はおそらくそれを非公式に行います。私たちはわざとやります。"

#: ../../chapter2.rst:715
msgid ""
"During one of our interviews I asked Moore if he used diagrams of any "
"sort to plan out the conceptual model, or did he code straight into "
"Forth? His reply:"
msgstr "私たちはインタビューで、ムーアに、概念モデルを計画するために何らかの図表を使用したのか、それとも直接Forthでコーディングしたのかを尋ねました。彼の返事は、"

#: ../../chapter2.rst:706
msgid ""
"The conceptual model **is** Forth. Over the years I've learned to think "
"that way."
msgstr "概念モデル＝Forthです。長年の経験から、私はそのように考えることを学びました。"

#: ../../chapter2.rst:709
msgid "**Can everyone learn to think that way?**"
msgstr "**誰もがそのように考えることを学べますか？**"

#: ../../chapter2.rst:711
msgid ""
"I've got an unfair advantage. I codified my programming style and other "
"people have adopted it. I was surprised that this happened. And I feel at"
" a lovely advantage because it is my style that others are learning to "
"emulate. Can they learn to think like I think? I imagine so. It's just a "
"matter of practice, and I've had more practice."
msgstr "私には不公平な優位があります。私は自身のプログラミングスタイルを体系化し、他の人々がそれを採用しました。私はこのことにびっくりしました。人が私のスタイルをエミュレートするために学ぶのは素敵に思えます。彼らは私が考えるように考えることを学べますか、という質問には、私は可能だと思います。それは単に訓練の問題です。私はたくさん訓練してできるようになりました。"

# ルール　か　規則　か　悩む
#: ../../chapter2.rst:718
msgid "Defining the Rules"
msgstr "ルールの定義"

#: ../../chapter2.rst:720
msgid ""
"Most of your efforts at defining a problem will center on describing the "
"interface. Some applications will also require that you define the set of"
" application rules."
msgstr "問題を定義するための努力のほとんどはインターフェイスの説明に集中することになるでしょう。アプリケーションによってはアプリケーションルールの組を定義する必要があります。"

#: ../../chapter2.rst:724
msgid ""
"All programming involves rules. Usually these rules are so simple it "
"hardly matters how you express them: “If someone pushes the button, ring "
"the bell.”"
msgstr ""
"すべてのプログラミングはルールを含みます。 "
"通常、これらのルールは非常にシンプルなので、どのように表現するかはほとんど問題になりません。例えば「誰かがボタンを押した場合は、ベルを鳴らしてください。」のように。"

# sentence 短文 でいいかな？
#: ../../chapter2.rst:728
msgid ""
"Some applications, however, involve rules so complicated that they can’t "
"be expressed in a few sentences of English. A few formal techniques can "
"come in handy to help you understand and document these more complicated "
"rules."
msgstr ""
"ただし、アプリケーションによっては、規則が非常に複雑で、短文では表現できないものもあります。 "
"これらのより複雑な規則を理解し文書化するのに、いくつかの技法が役立つことがあります。"

#: ../../chapter2.rst:733
msgid ""
"Here’s an example. Our requirements call for a system to compute the "
"charges on long-distance phone calls. Here’s the customer’s explanation "
"of its rate structure. (I made this up; I have no idea how the phone "
"company actually computes their rates except that they overcharge.)"
msgstr "一例として、私たちが欲しいのは、長距離電話の通話料を計算するシステムです。以下がその料金体系の説明です（これを書いたのは私ですが、電話会社が客にふっかける料金の計算を、実際にどのように計算するのかは知りません）。"

#: ../../chapter2.rst:738
msgid ""
"All charges are computed by the minute, according to distance in hundreds"
" of miles, plus a flat charge. The flat charge for direct dial calls "
"during weekdays between 8 A.M. and 5 P.M. is .30 for the first minute, "
"and .20 for each additional minute; in addition, each minute is charged "
".12 per 100 miles. The flat charge for direct calls during weekdays "
"between 5 P.M. and 11 P.M. is .22 for the first minute, and .15 for each "
"additional minute; the distance rate per minute is .10 per 100 miles. The"
" flat charge for direct calls late during weekdays between 11 P.M. or "
"anytime on Saturday, Sundays, or holidays is .12 for the first minute, "
"and .09 for each additional minute; the distance rate per minute is .06 "
"per 100 miles. If the call requires assistance from the operator, the "
"flat charge increases by .90, regardless of the hour."
msgstr "全ての料金は、数百マイルの距離に応じて分単位で計算される。加えて定額料金がある。平日の午前8時から午後5時の間の、直通ダイヤル通話の固定料金は、最初の1分が30セント、追加の各1分で20セント(\".20\")。加えて、100マイルごとに12セント(\".12\")を各1分ごとに課金します。平日の午後5時から午後11時の間の、直通ダイヤル通話の固定料金は、最初の1分が22セント(\".22\")、追加の各1分で15セント(\".15\")。距離に応じた料金が100マイル当たり1分12セント(\".12\")かかります。平日の午後11時以降か、土曜日・日曜日・祝祭日の終日は、最初の1分が12セント(\".12\")、そして追加の各1分が9セント(\".09\")。距離に応じた料金が100マイル当たり1分6セント(\".06\")かかります。電話オペレータを頼んだ場合、時間に関係なく固定料金が90セント(\".90\")増加します。"

#: ../../chapter2.rst:751
msgid ""
"This description is written in plain old English, and it’s quite a "
"mouthful. It’s hard to follow and, like an attic cluttered with "
"accumulated belongings, it may even hide a few bugs."
msgstr "この説明は普通の文章で書かれていて、かなり饒舌です。この文章を追うのは大変で、そして、ガラクタがぎっしり詰まった屋根裏部屋のように、いくつものバグを隠しているかもしれません。"

#: ../../chapter2.rst:755
msgid ""
"In building a conceptual model for this system, we must describe the rate"
" structure in an unambiguous, useful way. The first step towards cleaning"
" up the clutter involves factoring out irrelevant pieces of "
"information—that is, applying the rules of limited redundancy. We can "
"improve this statement a lot by splitting it into two statements. First "
"there’s the time-of-day rule:"
msgstr ""
"このシステムのための概念モデルを構築する際には、明確で有用な方法で料金構造を記述する必要があります。 "
"雑然としたものを整理するための最初のステップは、無関係な情報を取り除くことです。 この文章を2つに分割することで、大幅に改善できます。 "
"まず、時刻規則があります。"

#: ../../chapter2.rst:763
msgid ""
"Calls during weekdays between 8 A.M. and 5 P.M. are charged at \"full\" "
"rate. Calls during weekdays between 5 P.M. and 11 P.M. are charged at "
"\"lower\" rate. Calls placed during weekdays between 11 P.M. or anytime "
"on Saturday, Sundays, or holidays are charged at the \"lowest\" rate."
msgstr ""
"平日の午前8時から午後5時の通話は「full」料金です。\n"
"平日の午後5時から午後11の通話は「lower」料金です。\n"
"平日の午後11時以降と土曜日・日曜日・祝祭日の終日は「lowest」料金です。"

#: ../../chapter2.rst:768
msgid ""
"Then there’s the rate structure itself, which should be described in "
"terms of “first-minute rate,” “additional minute rate,” “distance rate,” "
"and “operator-assistance rate.”"
msgstr ""
"それから料金構造自体として、「最初の1分料金(first-minute rate)」、「追加の各1分料金(additional minute "
"rate)」、「距離による料金distance rate)」、「電話オペレータ料金(operator-assistance "
"rate)」の観点から説明する必要があります。"

#: ../../chapter2.rst:774
msgid "Factor the fruit. (Don't confuse apples with oranges.)"
msgstr "要因とは果物と説く。その心は、「りんごとオレンジを混同しないでください」"

#: ../../chapter2.rst:776
msgid ""
"These prose statements are still difficult to read, however. System "
"analysts use several techniques to simplify these statements: structured "
"English, decision trees, and decision tables. Let’s study each of these "
"techniques and evaluate their usefulness in the Forth environment."
msgstr ""
"しかし、これらの文章はまだ読みにくいです。 "
"システム分析者、構造化された文章、ディシジョンツリー(決定木)、ディシジョンテーブル(決定表)など、これらの文章を単純化するためにいくつかの手法を使用します。"
" これらの各技法を調べて、Forth環境におけるそれらの有用性を学びましょう。"

#: ../../chapter2.rst:782
msgid "Structured English"
msgstr "構造化文章"

#: ../../chapter2.rst:784
msgid ""
"Structured English is a sort of structured pseudocode in which our rate "
"statement would read something like this:"
msgstr "構造化文章(Structured English)は一種の構造化疑似コードで、料金の文章は次のようになります。"

#: ../../chapter2.rst:837
msgid ""
"This is just plain awkward. It’s hard to read, harder to maintain, and "
"hardest to write. And for all that, it’s worthless at implementation "
"time. I don’t even want to talk about it anymore."
msgstr "これは単にめんどくさいだけです。読むのが難しく、保守が難しく、書くのが一番難しく、しかも実装時には意味がありません。もうクチにするのも嫌です。"

#: ../../chapter2.rst:843
msgid "The Decision Tree"
msgstr "ディシジョン・ツリー"

#: ../../chapter2.rst:849
msgid "Example of a decision tree."
msgstr "ディシジョン・ツリーの例"

#: ../../chapter2.rst:853
msgid ""
":numref:`fig2-4`  illustrates the telephone rate rules by means of a "
"decision tree. The decision tree is the easiest method of any to “follow "
"down” to determine the result of certain conditions. For this reason, it "
"may be the best representation to show the customer."
msgstr ""
":numref:`fig2-4` "
"は電話料金のルールを表すディシジョン・ツリー(決定木)です。ディシジョン・ツリーは、条件分岐に従って書くのが最も簡単な方法です。このため、顧客に見せる最も良い表現かもしれません。"

#: ../../chapter2.rst:858
msgid ""
"Unfortunately, the decision tree is difficult to “follow up,” to "
"determine which conditions produce certain results. This difficulty "
"inhibits seeing ways to simplify the problem. The tree obscures the fact "
"that additional minutes cost the same, whether the operator assists or "
"not. You can’t see the facts for the tree."
msgstr "残念ながら、どの条件がどの条件を生み出すか決めるために、ディシジョン・ツリーで追跡するのは困難です。これが問題を単純化して見せる事を妨げます。このツリーは電話オペレータが補助しているかどうかにかかわらず、追加の分にかかる費用が同じであるという事実を覆い隠しています。あなたはツリーの事実を見ることはできません。"

#: ../../chapter2.rst:866
msgid "The Decision Table"
msgstr "ディシジョンテーブル"

#: ../../chapter2.rst:868
msgid ""
"The decision table, described next, provides the most usable graphic "
"representation of compound rules for the programmer, and possibly for the"
" customer as well.  :numref:`fig2-5`  shows our rate structure rules in "
"decision-table form."
msgstr ""
"以下に説明するディシジョンテーブル(決定表)は、プログラマにとって、そして場合によっては顧客にとっても、最も有用な複合ルールの図表です。 "
":numref:`fig2-5` は、ディシジョンテーブルの形で電話料金ルールの構造を表しています。"

#: ../../chapter2.rst:877
msgid "The decision table."
msgstr "ディシジョンテーブル(決定表)"

#: ../../chapter2.rst:881
msgid ""
"In :numref:`fig2-5`  there are three dimensions: the rate discount, "
"whether an operator intervenes, and initial minute vs. additional minute."
msgstr ":numref:`fig2-5` には３つの次元があります。割引率、電話オペレータを使うかどうか、最初の1分対追加の分、です。"

#: ../../chapter2.rst:885
msgid ""
"Drawing problems with more than two dimensions gets a little tricky. As "
"you can see, these additional dimensions can be depicted on paper as "
"subdimensions within an outer dimension. All of the subdimension’s "
"conditions appear within every condition of the outer dimension. In "
"software, any number of dimensions can be easily handled, as we’ll see."
msgstr "紙に二次元を超える問題を描くのは少し難しいです。ご覧のように、これらの追加の次元は外側の次元の中のサブ次元として紙に描く事ができます。サブ次元の全ての条件は、外側の次元の全ての条件内に表示されます。ソフトウェアでは、ご存知のとおり、任意の数の次元を簡単に処理できます。"

# factoring 因数分解　要因分解　整理(re-factoring)
#: ../../chapter2.rst:891
msgid ""
"All the techniques we’ve described force you to analyze which conditions "
"apply to which dimensions. In factoring these dimensions, two rules "
"apply:"
msgstr "私たちがこれまでに説明した全ての手法を使って、どの条件がどの次元に適用されるかを分析しなければなりません。これらの次元の要因分解には次の２つのルールが適用されます。"

#: ../../chapter2.rst:895
msgid ""
"First, all the elements of each dimension must be mutually exclusive. You"
" don’t put “first minute” in the same dimension as “direct dial,” because"
" they are not mutually exclusive."
msgstr "第一に、各次元のすべての要素はお互い排他的でなければなりません。「直通ダイヤル」と同じ次元に「最初の1分」を入れないでください。これらは相互に排他的ではないからです。"

#: ../../chapter2.rst:899
msgid ""
"Second, all possibilities must be accounted for within each dimension. If"
" there were another rate for calls made between 2 A.M. to 2:05 A.M., the "
"table would have to be enlarged."
msgstr ""
"第二に、すべての可能性が各次元内で説明されなければなりません。 "
"午前2時から午前2時5分間にかけられた通話に別の料金がある場合、テーブルを拡大する必要があります。"

#: ../../chapter2.rst:903
msgid ""
"But our decision tables have other advantages all to themselves. The "
"decision table not only reads well to the client but actually benefits "
"the implementor in several ways:"
msgstr "しかし、ディシジョンテーブルには他の利点もあります。ディシジョンテーブルは顧客が読みやすいだけでなく、以下の通り、実際に幾つかの点で実装者に利益をもたらします。"

#: ../../chapter2.rst:909
msgid "Transferability to actual code."
msgstr "実際のコードに変換が容易"

#: ../../chapter2.rst:908
msgid ""
"This is particularly true in Forth, where decision tables are easy to "
"implement in a form very similar to the drawing."
msgstr "これは、ディシジョンテーブルが、図表とよく似た形式で、簡単に実装出来るForthに特に当てはまります。"

#: ../../chapter2.rst:912
msgid "Ability to trace the logic upwards."
msgstr "ロジックを上流に向かって追跡"

#: ../../chapter2.rst:912
msgid "Find a condition and see what factors produced it."
msgstr "条件を探して、そしてそれがどのような要因で引き起こされたのかを調べます。"

#: ../../chapter2.rst:916
msgid "Clearer graphic representation."
msgstr "より明確な図絵的表現"

#: ../../chapter2.rst:915
msgid ""
"Decision tables serve as a better tool for understanding, both for the "
"implementor and the analyst."
msgstr "ディシジョンテーブルは実装者にとっても分析者にとっても理解のための良いツールとして役に立ちます。"

#: ../../chapter2.rst:918
msgid ""
"Unlike decision trees, these decision tables group the *results* together"
" in a graphically meaningful way. Visualization of ideas helps in "
"understanding problems, particularly those problems that are too complex "
"to perceive in a linear way."
msgstr ""
"ディシジョンツリーと異なり、ディシジョンテーブルは「結果」を図表的に意味のある方法でグループ化します。 "
"考えを視覚化することで、問題、特に複雑すぎて直感的に認識することができない問題を理解するのに役立ちます。"

#: ../../chapter2.rst:923
msgid ""
"For instance, :numref:`fig2-5`  clearly shows that the charge for "
"additional minutes does not depend on whether an operator assisted or "
"not. With this new understanding we can draw a simplified table, as shown"
" in :numref:`fig2-6` ."
msgstr ""
"例えば、 :numref:`fig2-5` "
"は、追加の分の料金が電話オペレータを使ったどうかに依存しないことを明確に示しています。この新しい理解により、私たちは "
":numref:`fig2-6` に示すように、単純化した表にすることができます。"

#: ../../chapter2.rst:932
msgid "A simplified decision table."
msgstr "単純化したディシジョンテーブル"

#: ../../chapter2.rst:936
msgid ""
"It’s easy to get so enamored of one’s analytic tools that one forgets "
"about the problem. The analyst must do more than carry out all "
"possibilities of a problem to the nth degree, as I have seen authors of "
"books on structured analysis recommend. That approach only increases the "
"amount of available detail. The problem solver must also try to simplify "
"the problem."
msgstr ""
"問題について考えることを忘れるぐらい分析ツールに夢中になります。\n"
"構造化分析に関する本の著者が推奨するように、分析者は問題の全ての可能性をｎ番目の程度まで実行する以上のことをしなければなりません。そのアプローチは詳細を増やしてまいます。また問題解決者は問題の単純化を試みねばなりません。"

#: ../../chapter2.rst:945
msgid "You don't understand a problem until you can simplify it."
msgstr "あなたは問題を単純化できるまでは、問題を理解しません。"

#: ../../chapter2.rst:947
msgid ""
"If the goal of analysis is not only understanding, but simplification, "
"then perhaps we’ve got more work to do."
msgstr "分析の目的が理解だけではなく単純化である場合は、おそらく更なる作業が必要です。"

#: ../../chapter2.rst:950
msgid ""
"Our revised decision table ( :numref:`fig2-6` ) shows that the per-mile "
"charge depends only on whether the rate is full, lower, or lowest. In "
"other words, it’s subject to only one of the three dimensions shown in "
"the table. What happens if we split this table into two tables, as in "
":numref:`fig2-7` ?"
msgstr ""
"私たちの修正されたディシジョンテーブル( :numref:`fig2-6` "
")はマイルあたりの料金が料金が「full」か「lower」か「lowest」かによってのみ決まることを示しています。 "
"つまり、テーブル示されている3つの次元のうちの1つだけが適用されます。 :numref:`fig2-7` "
"のように、このテーブルを２つに分割するとどうなるでしょうか？"

#: ../../chapter2.rst:960
msgid "The sectional decision table."
msgstr "分割ディシジョンテーブル"

#: ../../chapter2.rst:964
msgid ""
"Now we’re getting the answer through a combination of table look-up and "
"calculation. The formula for the per-minute charge can be expressed as a "
"pseudoForth definition:"
msgstr "今度は、テーブルのルックアップと計算の組み合わせによって答えを得ています。 1分あたりの料金の式は、擬似Forth定義として表すことができます。"

#: ../../chapter2.rst:975
msgid "The “+” now appears once in the definition, not nine times in the table."
msgstr "「+」は、テーブルに9回現れるのではなく、定義内に1回だけ表示されます。"

#: ../../chapter2.rst:977
msgid ""
"Taking the principle of calculation one step further, we note (or "
"remember from the original problem statement) that operator assistance "
"merely adds a one-time charge of .90 to the total charge. In this sense, "
"the operator charge is not a function of any of the three dimensions. "
"It’s more appropriately expressed as a “logical calculation”; that is, a "
"function that combines logic with arithmetic:"
msgstr ""
"計算の本質化をさらに一歩進めて、電話オペレータの使用が合計料金に対して１回だけ90セント(\".90)を追加するだけであることに注意します(または元の、問題の文章から思い出してください)。"
" この意味で、電話オペレータ料金は3次元のいずれの機能でもありません。 "
"それはより適切には「論理演算」として表現されます。つまり、論理と算術を組み合わせた機能です。"

#: ../../chapter2.rst:992
msgid "(But remember, this charge applies only to the first minute.)"
msgstr "(しかし思い出して下さい。この料金は最初の１分にのみ適用されます。)"

#: ../../chapter2.rst:998
msgid "The decision table without operator involvement depicted."
msgstr "電話オペレータ料金無しのディシジョンテーブル"

#: ../../chapter2.rst:1002
msgid ""
"This leaves us with the simplified table shown in :numref:`fig2-8` , and "
"an increased reliance on expressing calculations. Now we’re getting "
"somewhere."
msgstr ":numref:`fig2-8` に示す単純化されたテーブルと、信頼できる計算表現が残りました。今、私たちはとりあえず何処かに到着しました。"

#: ../../chapter2.rst:1006
msgid "Let’s go back to our definition of ``PER-MINUTE-CHARGE``:"
msgstr "話を ``PER-MINUTE-CHARGE`` に戻しましょう。"

#: ../../chapter2.rst:1015
msgid ""
"Let’s get more specific about the rules for the connection charge and for"
" the mileage charge."
msgstr "接続料金(connection charge)とマイレージ料金(mileage charge)のルールについてより具体的に説明しましょう。"

#: ../../chapter2.rst:1018
msgid ""
"The connection charge depends on whether the minute is the first or an "
"additional minute. Since there are two kinds of per-minute charges, "
"perhaps it will be easiest to rewrite ``PER-MINUTE-CHARGE`` as two "
"different words."
msgstr ""
"接続料金は、最初の１分か追加の分かによって異なります。１分当たりの料金は２種類あるので、おそらく、 ``PER-MINUTE-CHARGE`` "
"を２つの異なるワードに書き換えるののがもっとも簡単でしょう。"

#: ../../chapter2.rst:1023
msgid ""
"Let’s assume we will build a component that will fetch the appropriate "
"rates from the table. The word ``1MINUTE`` will get the rate for the "
"first minute; ``+MINUTES`` will get the rate for each additional minute. "
"Both of these words will depend on the time of day to determine whether "
"to use the full, lower, or lowest rates."
msgstr ""
"テーブルから適切な料金を取得するコンポーネントを作成するとしましょう。\n"
"``1MINUTE`` というワードは最初の1分間のレートを取得します。 ``+MINUTES`` は追加の分ごとに料金を得ます。 "
"これらの語句は両方とも、fullレート、lowerレート、またはlowestレートのいずれかを使用するか決定するため、時刻に依存します。"

#: ../../chapter2.rst:1029
msgid "Now we can define the pair of words to replace ``PER-MINUTE-CHARGE``:"
msgstr "これで、以下の通り、 ``PER-MINUTE-CHARGE`` を置き換える為のワードのペアを定義できます。"

#: ../../chapter2.rst:1040
msgid ""
"What is the rule for the mileage charge? Very simple. It is the rate (per"
" hundred miles) times the number of miles (in hundreds). Let’s assume we "
"can define the word ``MILEAGE-RATE``, which will fetch the mileage rate "
"from the table:"
msgstr ""
"マイレージ(mileage)料金の規則は？　とてもシンプルです。それは料金レート(100マイル当たり) × "
"(100マイル単位の)マイル数です。以下のように、テーブルからマイレージ料金レートを取得する、 ``MILEAGE-RATE`` "
"というワードを定義できるとしましょう。"

#: ../../chapter2.rst:1052
msgid ""
"Finally, if we know the total number of minutes for a call, we can now "
"calculate the total direct-dial charge:"
msgstr "最後に、通話の合計分数がわかっている場合は、直通ダイヤル通話料金の合計を計算できます。"

#: ../../chapter2.rst:1065
msgid ""
"We’ve expressed the rules to this particular problem through a "
"combination of simple tables and logical calculations."
msgstr "最後に、この特定の問題に対するルールは、単純なテーブルと論理演算を組み合わせて表現しました。"

#: ../../chapter2.rst:1068
msgid ""
"(Some final notes on this example: We’ve written something very close to "
"a running Forth application. But it is only pseudocode. We’ve avoided "
"stack manipulations by assuming that values will somehow be on the stack "
"where the comments indicate. Also, we’ve used hyphenated names because "
"they might be more readable for the customer. Short names are preferred "
"in real code—see :doc:`Chapter Five<chapter5>`.)"
msgstr ""
"（この例に関する最後の注意点：実行中のForthアプリケーションに非常に近いものを書きました。ただし、これは疑似コードにすぎません。コメントが示す場所には値がスタックにあると仮定してスタック操作を避けました。"
" 実際のコードでは短い名前が好まれます。 :doc:`第５章<chapter5>` 参照）。"

#: ../../chapter2.rst:1075
msgid ""
"We’ll unveil the finished code for this example in :doc:`Chapter "
"Eight<chapter8>`."
msgstr "完全なコードは :doc:`第８章<chapter8>` にあります。"

#: ../../chapter2.rst:1079
msgid "Defining the Data Structures"
msgstr "データ構造の定義"

#: ../../chapter2.rst:1081
msgid ""
"After defining the interfaces, and sometimes defining the rules, "
"occasionally you’ll need to define certain data structures as well. We’re"
" not referring here to the implementation of the data structures, but "
"rather to a description of their conceptual model."
msgstr ""
"インターフェイスを定義し、しばしばルールを定義した後、ときには特定のデータ構造も定義する必要があります。 "
"ここでは、データ構造の実装についてではなく、それらの概念モデルの説明について説明します。"

#: ../../chapter2.rst:1086
msgid ""
"If you’re automating a library index, for instance, a crucial portion of "
"your analysis will concern developing the logical data structure. You’ll "
"have to decide what information will be kept for each book: title, "
"author, subject, etc. These “attributes” will comprise an “entity” (set "
"of related records) called ``BOOKS``. Then you’ll have to determine what "
"other data structures will be required to let the users search the "
"``BOOKS`` efficiently."
msgstr ""
"たとえば、図書館蔵書検索の自動化をしている場合、分析の重要な部分は、論理データ構造の開発に関係します。書籍ごとにどの情報を保存するかを決定する必要があります。タイトル、作者、主題など。これらの「属性」は、"
" ``BOOKS`` と呼ばれる「エンティティ」（一連の関連レコード）を構成します。 それから、ユーザーが効率的に ``BOOKS`` "
"を検索できるようにするために、他にどのようなデータ構造が必要になるかを決定しなければなりません。"

#: ../../chapter2.rst:1098
msgid "Given two adequate solutions, the correct one is the simpler."
msgstr "2つの妥当な解決策が与えられたら、正解はよりシンプルな方です。"

#: ../../chapter2.rst:1102
msgid ""
"Certain constraints will also affect the conceptual model of the data "
"structure. In the library index example, you need to know not only *what*"
" information the users need, but also how long they’re willing to *wait* "
"to get it."
msgstr ""
"特定の制約はデータ構造の概念モデルにも影響します。 "
"図書館蔵書検索の例では、ユーザーが必要とする情報だけでなく、ユーザーがそれを入手するのを待つ時間も知っておく必要があります。"

#: ../../chapter2.rst:1107
msgid ""
"For instance, users can request listings of topics by year of "
"publication—say everything on ladies’ lingerie between 1900 and 1910. If "
"they expect to get this information in the snap of a girdle, you’ll have "
"to index on years and on topics. If they can wait a day, you might just "
"let the computer search through all the books in the library."
msgstr "たとえば、出版年ごとにトピックのリストを要求することができるとします。例えば、1900年から1910年の間の女性のランジェリーに関するすべてとか。もしそれがガードルのホックについての情報を期待しているなら、あなたは何年も掛けて詳細にトピックを索引化しなければなりません。もし、1日待つことができるのであれば、図書館にあるすべての本をコンピュータに検索させることもできます。"

#: ../../chapter2.rst:1115
msgid "Achieving Simplicity"
msgstr "シンプル化の成就"

#: ../../chapter2.rst:1119
msgid "Keep it simple."
msgstr "シンプルさを保って下さい。"

#: ../../chapter2.rst:1121
msgid ""
"While you are taking these crucial first steps toward understanding the "
"problem, keep in mind the old saying:"
msgstr "あなたが問題を理解するために、肝心の最初のステップを踏み出す時、以下のことわざを覚えておいてください。"

#: ../../chapter2.rst:1124
msgid "Given two solutions to a problem, the correct one is the simpler."
msgstr "２つの解決策が与えられた時は、正解は、よりシンプルな方です。"

#: ../../chapter2.rst:1126
msgid ""
"This is especially true in software design. The simpler solution is often"
" more difficult to discover, but once found, it is:"
msgstr "これは特にソフトウェア設計に当てはまります。 よりシンプルな解決策は、発見が困難なことが多いですが、発見されると、以下のようになります。"

#: ../../chapter2.rst:1129
msgid "easier to understand"
msgstr "理解するのが簡単"

#: ../../chapter2.rst:1131
msgid "easier to implement"
msgstr "実装するのが簡単"

#: ../../chapter2.rst:1133
msgid "easier to verify and debug"
msgstr "検証とデバッグが簡単"

#: ../../chapter2.rst:1135
msgid "easier to maintain"
msgstr "保守が簡単"

#: ../../chapter2.rst:1137
msgid "more compact"
msgstr "もっとコンパクトに"

#: ../../chapter2.rst:1139
msgid "more efficient"
msgstr "もっと効率的に"

#: ../../chapter2.rst:1141
msgid "more fun"
msgstr "もっと楽しく"

#: ../../chapter2.rst:1160
msgid "One of the most compelling advocates of simplicity is Moore:"
msgstr "シンプルさの最も説得力のある支持者の一人はムーアです。"

#: ../../chapter2.rst:1144
msgid ""
"You need a feeling for the size of the problem. How much code should it "
"take to implement the thing? One block? Three? I think this is a very "
"useful design tool. You want to gut-feel whether it's a trivial problem "
"or a major problem, how much time and effort you should spend on it."
msgstr ""
"あなたは問題の大きさを感じる必要があります。モノを実装するのにどれぐらいのコードが必要ですか？１ブロック？それとも３ブロック？　"
"そう感じる事は、とても便利な設計ツールだと考えます。それがささいな問題なのか、それとも大きな問題なのか、どれだけの時間と労力を費やすべきか、本質を感じる事を欲します。"

#: ../../chapter2.rst:1150
msgid ""
"When you're done, look back and say, \"Did I come up with a solution that"
" is reasonable?\" If your solution fills six screens, it may seem you've "
"used a sledgehammer to kill a mosquito. Your mental image is out of "
"proportion to the significance of the problem."
msgstr ""
"あなたが作業を終えたら、振り返りして「合理的な解決策を考え出しましたか」と問います。もしあなたの解決策が6スクリーンに渡るのなら、それはあなたが蚊を殺すために大ハンマーを使った事があるのかもしれません。あなたの頭の中のイメージは問題の重要性に比例していません。(訳注:スクリーン＝Forthの伝統的な、フロッピーディスク上の記録領域の単位"
" 1screen=2000byteを80桁x25行の領域として扱う)"

#: ../../chapter2.rst:1155
msgid ""
"I've seen nuclear physics programs with hundreds of thousands of lines of"
" FORTRAN. Whatever that code does, it doesn't warrant hundreds of "
"thousands of lines of code. Probably its writers have overgeneralized the"
" problem. They've solved a large problem of which their real needs are a "
"subset. They have violated the principle that the solution should match "
"the problem."
msgstr "私はFORTRANで書かれた何十万行の各物理学プログラムを見たことがあります。そのコードが何するにしても、数十万行のコードを正当化する訳ではありません。おそらくそのプログラムの作者は問題を過度に一般化しています。彼らは大きな問題を解決しましたが、本当に必要なのはそのサブセットだけです。彼らは解決策が問題に一致するはずであるという原則に違反しています。"

#: ../../chapter2.rst:1164
msgid ""
"Generality usually involves complexity. Don't generalize your solution "
"any more than will be required; instead, keep it changeable."
msgstr "一般化する事は通常、複雑さを伴います。 必要以上にあなたの解決策を一般化しないでください。 代わりに、変更可能にしてください。"

#: ../../chapter2.rst:1205 ../../chapter2.rst:1241
msgid "Moore continues:"
msgstr "ムーアは続けます。"

#: ../../chapter2.rst:1168
msgid ""
"Given a problem, you can code a solution to it. Having done that, and "
"found certain unpleasantnesses to it, you can go back and change the "
"problem, and end up with a simpler solution."
msgstr "課題が与えられたら、あなたはその解決策をコーディングできます。そうしたあと、それに明らかに不快な点を見つけたなら、あなたは前の段階に戻って課題を変更する事ができ、そしてよりシンプルな解決策に仕上げる事ができます。"

#: ../../chapter2.rst:1172
msgid ""
"There's a class of device optimization---minimizing the number of gates "
"in a circuit-where you take advantage of the \"don\\'t care\" situation. "
"These occur either because a case won't arise in practice or because you "
"really don't care. But the spec is often written by people who have no "
"appreciation for programming. The designer may have carefully specified "
"all the cases, but hasn't told you, the programmer, which cases are "
"really important."
msgstr "「心配しない」状況を利用する、装置最適化(回路中のゲート数を最小化する)クラスがあります。それは実際には発生しないか、あるいは本当にあなたが心配しない為に起こります。でも、プログラミングを理解していない人々はしばしばこんな仕様を書きます。設計者は全ての場合を注意深く指定しているかも知れませんが、プログラマであるあなたにどれが本当に重要であるか伝えていないのかもしれません。"

#: ../../chapter2.rst:1179
msgid ""
"If you are free to go back and argue with him and take advantage of the "
"\"don\\'t cares\", you can come up with a simpler solution."
msgstr "もしプログラマのあなたが前に戻って設計者の彼と議論し「心配しない」仕様を利用できるなら、あなたはもっと簡単な解決策を思いつく事ができます。"

#: ../../chapter2.rst:1182
msgid ""
"Take an engineering application, such as a 75-ton metal powder press, "
"stamping out things. They want to install a computer to control the "
"valves in place of the hydraulic control previously used. What kind of "
"spec will you get from the engineer? Most likely the sensors were placed "
"for convenience from an electromechanical standpoint. Now they could be "
"put somewhere else, but the engineer has forgotten. If you demand "
"explanations, you can come closer to the real world and further from "
"their model of the world."
msgstr "技術的なアプリケーションを使って、75トン金属粉プレスのように物事を打ち切って下さい。彼らは、以前使用されていた油圧制御の代わりに、コンピュータ制御バルブを設置したい。あなたはプレス機エンジニアからどのような仕様を得ますか？電気機械的な観点からセンサーは暫定的に設置されている可能性が最も高いものです。しかし今、彼らはそれをちゃんとした場所に移設できていました。が、プレス機エンジニアはそれを失念しているようです。あなたが説明を求めるなら、彼らプレス機エンジニアの想像の世界のモデルから遠ざかり現実の世界に近づく事ができます。"

# うーん。いまいち意味わからん。
#: ../../chapter2.rst:1191
msgid ""
"Another example is the PID (proportional integration and differentiation)"
" algorithm for servos. You have one term that integrates, another term "
"that differentiates, and a third term that smooths. You combine those "
"with 30\\% integration, 10\\% differentiation, or whatever. But it\\'s "
"only a digital filter. It used to be convenient in analog days to break "
"out certain terms of the digital filter and say, \"This is the integrator"
" and this is the differentiator. I\\'ll make this with a capacitor and "
"I\\'ll make that with an inductor\"."
msgstr "もう1つの例は、サーボ用のPID（比例積分微分）アルゴリズムです。 統合する1つの項、微分化する別の項、および平滑化する3番目の項があります。 あなたは30％の統合と10％の微分化とそれ以外を組み合わせます。 しかし、それはデジタルフィルタだけです。アナログの時代には、デジタルフィルタの特定の項を「これは積分器で微分器です。コンデンサでこれを作り、インダクタでそれを作ります。 」とできて便利でした。"

#: ../../chapter2.rst:1201
msgid ""
"Again the spec writers will model the analog solution which was modeling "
"the electromechanical solution, and they\\'re several models away from "
"reality. In fact, you can replace it all with two or three coefficients "
"in a digital filter for a much cleaner, simpler and more efficient "
"solution."
msgstr "再び、仕様を書く人は、電気機械的な解決策をモデル化した、アナログの解決策をモデル化するでしょう。そしてそれらは現実から隔たったモデルです。実際には、デジタルフィルタの2つまたは3つの係数ですべて置き換えることができ、はるかにクリーンでシンプルで効率的な解決策を実現できます。"

#: ../../chapter2.rst:1209
msgid ""
"Go back to what the problem was before the customer tried to solve it. "
"Exploit the \"don\\'t cares\"."
msgstr "顧客がそれを解決しようとする前に問題が何であったかに戻ります。「心配しない」を悪用する。"

#: ../../chapter2.rst:1216
msgid "An overgeneralized solution."
msgstr "過度の一般化解決策"

#: ../../chapter2.rst:1221
msgid "Sometimes the possibilities for simplification aren't immediately obvious."
msgstr "単純化の可能性がすぐには明らかにならない場合があります。"

#: ../../chapter2.rst:1224
msgid ""
"There's this problem of zooming in a digitized graphics display, such as "
"CAD systems. You have a picture on the screen and you want to zoom in on "
"a portion to see the details."
msgstr "CADシステムのようなデジタル化されたグラフィックディスプレイでズーミングするというこの問題があります。 あなたは画面に絵を持っています、そしてあなたは詳細を見るために一部分にズームインしたいです。"

#: ../../chapter2.rst:1228
msgid ""
"I used to implement it so that you move the cursor to the position of "
"interest, then press a button, and it zooms until you have a window of "
"the desired size. That was the way I've always done it. Until I realized "
"that that was stupid. I never needed to zoom with such fine resolution."
msgstr "カーソルを目的の位置に移動してからボタンを押すと、目的のサイズのウィンドウが表示されるまでズームします。 それが私がいつもやっていた方法です。 それが愚かだと気づくまでは。 私はそのような細かい解像度でズームする必要はありませんでした。"

#: ../../chapter2.rst:1234
msgid ""
"So instead of moving the cursor a pixel at a time, I jump the cursor by "
"units of, say, ten. And instead of increasing the size of box, I jump the"
" size of the box. You don't have a choice of sizes. You zoom by a factor "
"of four. The in-between sizes are not interesting. You can do it as many "
"times as you like."
msgstr "一度に１ピクセルずつカーソルを移動するのではなく、例えば１０ピクセルずつジャンブさせます。そして箱の大きさをじわじわ増加させる代わりに、箱を段階的に大きくします。拡大率の選択肢はありません。４倍にズームします。中間の倍率には興味がありません。拡大は好きなだけ何度でもできます。"

#: ../../chapter2.rst:1240
msgid ""
"By quantizing things fairly brutally, you make it easier to work with, "
"more responsive, and simpler."
msgstr "物事を大胆に量子化することで、作業が簡単になり、応答が良くなり、シンプルになります。"

#: ../../chapter2.rst:1245
msgid "To simplify, quantize."
msgstr "シンプルに、量子化します。"

#: ../../chapter2.rst:1258
msgid "Moore concludes:"
msgstr "ムーアは結論づけます。"

#: ../../chapter2.rst:1248
msgid ""
"It takes arrogance to go back and say \"You didn\\'t really mean this\", "
"or \"Would you mind if I took off this page and replaced it with this "
"expression?\" They get annoyed. They want you to do what they told you to"
" do."
msgstr "「本当にこれを意味しているのではない」または「このページを外してこの表現に置き換えてもよろしいですか」と言って戻るのは傲慢です。彼らはいらいらします。彼らは、あなたに言ったとおりに、あなたがするのを求めます。"

#: ../../chapter2.rst:1253
msgid ""
"LaFarr Stuart took this attitude when he redesigned Forth [stuart80]_ . "
"He didn't like the input buffer, so he implemented Forth without it, and "
"discovered he didn't really need an input buffer."
msgstr "LaFarr StuartはForthを再設計したときにこのような態度を取りました。 [stuart80]_ 彼は入力バッファが好きではなかったので、彼はそれなしでForthを実装し、そして彼は本当に、入力バッファが必要でないことを発見しました。"

#: ../../chapter2.rst:1257
msgid ""
"If you can improve the problem, it's a great situation to get into. It's "
"much more fun redesigning the world than implementing it."
msgstr "あなたが問題を改善することができるならば、それは没頭するのが素晴らしい状況です。 実装よりも世界を再設計するほうが、はるかに楽しいです。"

#: ../../chapter2.rst:1260
msgid ""
"Effective programmers learn to be tactful and to couch their approaches "
"in non-threatening ways: “What would be the consequences of replacing "
"that with this?” etc."
msgstr "効果的なプログラマは、「これをこれに置き換えることの結果はどうなるのでしょうか」などと、危険を冒さない方法で、自分たちのアプローチを巧妙にし、指導することを学びます。"

#: ../../chapter2.rst:1264
msgid "Yet another way to simplify a problem is this:"
msgstr "問題を単純化するもう1つの方法は以下です。"

#: ../../chapter2.rst:1268
msgid "To simplify, keep the user out of trouble."
msgstr "シンプルにすることで、ユーザをトラブルから守って下さい。"

#: ../../chapter2.rst:1270
msgid ""
"Suppose you’re designing part of a word processor that displays a "
"directory of stored documents on the screen, one per line. You plan that "
"the user can move the cursor next to the name of any document, then type "
"a one-letter command indicating the chosen action: “p” for print, “e” for"
" edit, etc."
msgstr "ワープロの一部として、保存した文書のファイル名を１行に１つづつ画面に表示するよう設計しているとします。ユーザが任意の文書の名前の隣にカーソルを移動してから、選択したアクションを示す1文字のコマンドを入力するよう計画します。ば印刷の場合は「p」、編集の場合は「e」などです。"

#: ../../chapter2.rst:1276
msgid ""
"Initially it seems all right to let the user move the cursor anywhere on "
"the screen. This means that those places where text already appears must "
"be protected from being overwritten. This implies a concept of “protected"
" fields” and special handling. A simpler approach confines the cursor to "
"certain fields, possibly using reverse video to let the user see the size"
" of the allowable field."
msgstr "最初は、画面上の任意の場所にユーザがカーソルを移動できるようにしても問題ありません。 つまり、テキストがすでに表示されている場所は上書きされないように保護する必要があります。 これは、「保護フィールド」と特別な処理の概念を意味します。 より簡単なアプローチでは、カーソルを特定のフィールドに限定し、場合によってはユーザーに許容フィールドのエリアを表示させるために反転表示を使用します。"

#: ../../chapter2.rst:1283
msgid ""
"Another example occurs when an application prompts the user for a numeric"
" value. You often see such applications that don’t check input until you "
"press “return,” at which time the system responds with an error message "
"such as “invalid number.” It’s just as easy—probably easier—to check each"
" key as it’s typed and simply not allow non-numeric characters to appear."
msgstr "別の例は、アプリケーションがユーザに数値の入力を求めるときに発生します。 :kbd:`Enter` を押すまで入力をチェックしないアプリケーションがよくあります。そのときには「invalid number」などのエラーメッセージが表示されます。タイプした各キーが数字以外の時は表示を許さないようチェックする方がもっと簡単です。"

#: ../../chapter2.rst:1292
msgid "To simplify, take advantage of what's available."
msgstr "簡単にするために、利用可能なものを利用してください。"

#: ../../chapter2.rst:1302
msgid "Michael LaManna, a Forth programmer in Long Island, New York, comments:"
msgstr "ニューヨーク州ロングアイランドのForthプログラマ、Michael LaMannaは次のようにコメントしています。"

#: ../../chapter2.rst:1295
msgid ""
"I always try to design the application on the most powerful processor I "
"can get my hands on. If I have a choice between doing development on a "
"68000-based system and a 6809-based system, I'd go for the 68000-based "
"system. The processor itself is so powerful it takes care of a lot of "
"details I might otherwise have to solve myself."
msgstr "私はいつも自分が手に入れることができる最も強力なプロセッサでアプリケーションを設計しようとします。 68000ベースのシステムと6809ベースのシステムのどちらで開発するかを選択できる場合は、68000ベースのシステムを選択してください。 プロセッサ自体は非常に強力なので、他の方法で解決しなければならない可能性がある多くの詳細をプロセッサで処理できます。"

#: ../../chapter2.rst:1301
msgid ""
"If I have to go back later and rewrite parts of the application for a "
"simpler processor, that's okay. At least I won't have wasted my time."
msgstr "後で戻ってアプリケーションの一部を単純なプロセッサ用に書き直す必要がある場合は、問題ありません。 少なくとも私は自分の時間を無駄にしていないでしょう。"

#: ../../chapter2.rst:1304
msgid ""
"A word of caution: If you’re using an existing component to simplify your"
" prototype, don’t let the component affect your design. You don’t want "
"the design to depend on the internals of the component."
msgstr "注意：試作を簡素化するために既存のコンポーネントを使用している場合は、そのコンポーネントが設計に影響を与えないようにしてください。 設計がコンポーネントの内部に依存しないようにする必要があります。"

#: ../../chapter2.rst:1310
msgid "Budgeting and Scheduling"
msgstr "予算とスケジュール"

#: ../../chapter2.rst:1312
msgid ""
"Another important aspect of the analysis phase is figuring the price tag."
" Again, this process is much more difficult than it would seem. If you "
"don’t know the problem till you solve it, how can you possibly know how "
"long it will take to solve it?"
msgstr "分析段階のもう一つの重要なフェイズは、値札を付ける事です。繰り返しますが、このプロセスは予想以上に困難です。 あなたがその問題を解決するまで、あなたはその問題を知らないのに、あなたがそれを解決するのにどのくらい時間がかかるかを、どのようにして知ることができるのでしょうか？"

#: ../../chapter2.rst:1317
msgid ""
"Careful planning is essential, because things always take longer than you"
" expect. I have a theory about this, based on the laws of probability:"
msgstr "物事は常にあなたが予想よりも時間がかかるので、慎重な計画が不可欠です。 確率の法則に基づいて、これについての理論があります。"

#: ../../chapter2.rst:1325
msgid "Conventional wisdom reveres complexity."
msgstr "紋切り型の知恵は複雑さを崇拝する"

#: ../../chapter2.rst:1331
msgid ""
"The mean time for making a \"two-hour\" addition to an application is "
"approximately 12 hours."
msgstr "その意味は、アプリケーションに「2時間」追加する平均時間は約12時間です。"

#: ../../chapter2.rst:1334
msgid ""
"Imagine the following scenario: You’re in the middle of writing a large "
"application when suddenly it strikes you to add some relatively simple "
"feature. You think it’ll take about two hours, so without further "
"planning, you just do it. Consider: That’s two hours coding time. The "
"design time you don’t count because you perceived the need—and the "
"design—in a flash of brilliance while working on the application. So you "
"estimate two hours."
msgstr "次のようなシナリオを想像してみてください。あなたが大きなアプリケーションを書いている最中に突然、比較的単純な機能を追加しようとしています。 あなたはそれが約2時間かかると思うので、それ以上の計画なしで、あなたはそれをするだけです。 検討してください。それは2時間のコーディング時間です。 アプリケーションの作業をしている間、必要性と設計をすばやく感じ取ることができたので、設計時間はカウントされません。 それであなたは2時間を見積もります(設計0時間、実装2時間)。"

#: ../../chapter2.rst:1342
msgid "But consider the following possibilities:"
msgstr "しかし、以下の可能性を考えてください。"

#: ../../chapter2.rst:1344
msgid ""
"Your implementation has a bug. After two hours it doesn’t work. So you "
"spend another two hours recoding. (Total 4.)"
msgstr "あなたの実装にはバグがありました。 当初見積の2時間経ってもうまくいかない。 それで、あなたはもう2時間見積を増やします(計４時間)。"

#: ../../chapter2.rst:1347
msgid ""
"OR, before you implemented it, you realized your initial design wouldn’t "
"work. You spend two hours redesigning. *These* two hours count. Plus "
"another two hours coding it. (Total 4.)"
msgstr "また、実装する前に、最初の設計(0時間)ではうまくいかないことに気付いたとします。再設計には2時間かかります。更に再設計に基づいて2時間かけてコーディングします(計４時間)。"

#: ../../chapter2.rst:1351
msgid ""
"OR, you implement the first design before you realize the design wouldn’t"
" work. So you redesign (two more hours) and reimplement (two more). "
"(Total 6.)"
msgstr "または、最初の設計が機能しないことに気付く前に、最初の設計で実装済(0+2時間)でした。 それで、あなたは再設計し(2時間)そして再実装します(2時間）。(計6時間)"

#: ../../chapter2.rst:1355
msgid ""
"OR, you implement the first design, code it, find a bug, rewrite the "
"code, find a design flaw, redesign, recode, find a bug in the new code, "
"recode again. (Total 10.)"
msgstr "または、最初の設計(0時間)をコーディング(2時間)し、バグを見つけてコードを書き換え(2時間)、デザインの欠陥を見つけ、再設計し(2時間)、再コード化し(2時間))、新しいコードでバグを見つけ、再コード化(2時間)します。(計10時間)"

#: ../../chapter2.rst:1359
msgid "You see how the thing snowballs?"
msgstr "まるで雪玉ですね。"

#: ../../chapter2.rst:1361
msgid ""
"Now you have to document your new feature. Add two hours to the above. "
"(Total 12.)"
msgstr "そして今、あなたの新機能を文書化しなければなりません。 上記に2時間を加えます。 （合計12時間）"

#: ../../chapter2.rst:1364
msgid ""
"After you’ve spent anywhere from 2 to 12 hours installing and debugging "
"your new feature, you suddenly find that element Y of your application "
"bombs out. Worst yet, you have no idea why. You spend two hours reading "
"memory dumps trying to divine the reason. Once you do, you spend as many "
"as 12 additional hours redesigning element Y. (Total 26.) Then you have "
"to document the syntax change you made to element Y. (Total 27.)"
msgstr "2〜12時間かけて新しい機能を組み込んでしてデバッグした後、突然、アプリケーションの要素Yが破壊されることに気付きました。 さらに悪いことに、理由はわかりません。 あなたはその理由を理解しようとして、メモリダンプを読むのに2時間を費やします。 そうすると、要素Yの再設計にさらに12時間かかる（合計26時間）。次に、要素Yに対して行った文法の変更を文書化する必要があります（合計27時間）。"

#: ../../chapter2.rst:1372
msgid ""
"That’s a total of over three man-days. If all these mishaps befell you at"
" once, you’d call for the men with the little white coats. It rarely gets"
" that bad, of course, but the odds are decidedly *against* any project "
"being as easy as you think it will be."
msgstr "3人日以上の工数になってしまいました。これらすべてが一度にあなたを襲ったのだったら、あなたは精神科に掛かるでしょう。 もちろん、これほど悪くなることはめったにありませんが、どのプロジェクトでも、あなたの予想どおりに簡単である勝率は高くありません。"

#: ../../chapter2.rst:1377
msgid ""
"How can you improve your chances of judging time requirements correctly? "
"Many fine books have been written on this topic, notably *The Mythical "
"Man-Month* by Frederick P. Brooks, Jr. [brooks75]_ . I have little to add"
" to this body of knowledge except for some personal observations."
msgstr "所要時間を正しく判断する可能性はどのように向上させることができますか？ このトピックについては、特にフレデリック・ブルックスが表した「人月の神話」  [brooks75]_ など、多くの素晴らしい本が書かれています。 個人的な観察を除いて、私はこの知識体系に追加することはほとんどありません。"

#: ../../chapter2.rst:1384
msgid ""
"Don’t guess on a total. Break the problem up into the smallest possible "
"pieces, then estimate the time for each piece. The sum of the pieces is "
"always greater than what you’d have guessed the total would be. (The "
"whole appears to be less than the sum of the parts.)"
msgstr "合計で推測しないでください。 問題をできるだけ小さい部分に分割してから、各部分の時間を見積もります。 ピースの合計は常に、合計で予想するよりも大きくなります（全体が部分の合計よりも少ないように見えます）。"

#: ../../chapter2.rst:1389
msgid ""
"In itemizing the pieces, separate those you understand well enough to "
"hazard a guess from those you don’t. For the second category, give the "
"customer a range."
msgstr "項目を箇条書きにする際には、推測の余地が無いほど充分に理解しているものと、そうでないものを分けてください。2番目のカテゴリでは、顧客に範囲を与えます。"

#: ../../chapter2.rst:1393
msgid ""
"A bit of psychology: always give your client some options. Clients *like*"
" options. If you say, “This will cost you $6,000,” the client will "
"probably respond “I’d really like to spend $4,000.” This puts you in the "
"position of either accepting or going without a job."
msgstr "ちょっとした心理学：常に顧客にいくつかの選択肢を与えなさい。 顧客は「オプション」が好きです。 「これは6,000ドルかかる」と言えば、顧客は「私は本当は4,000ドルで済ませたいのです」と答えます。これは、あなたを受け入れるか、仕事なしで行くという立場にあなたを置きます。"

#: ../../chapter2.rst:1398
msgid ""
"But if you say, “You have a choice: for $4,000 I’ll make it *walk* "
"through the hoop; for $6,000 I’ll make it *jump* through the hoop. For "
"$8,000 I’ll make it *dance* through the hoop waving flags, tossing "
"confetti and singing “Roll Out the Barrel.”"
msgstr "そこで顧客に言います、「あなたが選んで下さい。４千ドルなら私はすたすた歩いて輪くぐりします。６千ドルなら私はジャンプして輪くぐりします。８千ドルなら私は旗を振りかざし踊りながら輪くぐりします。」"

#: ../../chapter2.rst:1403
msgid "Most customers opt for jumping through the hoop."
msgstr "ほとんどの顧客はジャンプして輪くぐりする事を選びます。"

#: ../../chapter2.rst:1407
msgid "Everything takes longer than you think, including thinking."
msgstr "考えることも含め、すべてがあなたが思うよりも時間がかかります。"

#: ../../chapter2.rst:1410
msgid "Reviewing the Conceptual Model"
msgstr "概念モデルのレビュー"

#: ../../chapter2.rst:1412
msgid ""
"The final box on our iterative analytic wheel is labeled “Show Model to "
"Customer.” With the tools we’ve outlined in this chapter, this job should"
" be easy to do."
msgstr "反復分析観覧車の最後のゴンドラには「モデルを顧客に見せる」というラベルが貼ってあります。この章で概説したツールを使用すると、この作業は簡単になります。"

#: ../../chapter2.rst:1416
msgid ""
"In documenting the requirements specification, remember that specs are "
"like snowmen. They may be frozen now, but they shift, slip, and melt away"
" when the heat is on. Whether you choose data-flow diagrams or straight "
"Forth pseudocode, prepare yourself for the great thaw by remembering to "
"apply the concepts of limited redundancy."
msgstr "要求仕様を文書化する際には、仕様は雪だるまのようなものであることを忘れないでください。 それらは今凍っているかもしれませんが、熱があるときそれらは移動し、滑り、そして溶け去ります。 データフロー図を選択する場合でも、まっすぐなForth擬似コードを選択する場合でも、冗長性制限の概念を適用することを忘れないでください。"

#: ../../chapter2.rst:1422
msgid ""
"Show the documented conceptual model to the customer. When the customer "
"is finally satisfied, you’re ready for the next big step: the design!"
msgstr "文書化された概念モデルを顧客に見せ、顧客が最終的に満足したら、次の大きなステップ、設計への準備が整います。"

#: ../../chapter2.rst:1427
msgid "REFERNCES"
msgstr "参考文献"

#: ../../chapter2.rst:1429
msgid ""
"Kim Harris, \"The Forth Philosophy,\"   **Dr. Dobb's Journal,**  Vol. 6, "
"Iss. 9, No. 59 (Sept. 81),  pp. 6-11."
msgstr ""
"Kim Harris, \"The Forth Philosophy,\"   **Dr. Dobb's Journal,**  Vol. 6, "
"Iss. 9, No. 59 (Sept. 81),  pp. 6-11."

#: ../../chapter2.rst:1430
msgid ""
"Victor Weinberg,  **Structured Analysis,**   Englewood Cliffs, N.J.: "
"Prentice-Hall, Inc., 1980."
msgstr ""
"Victor Weinberg,  **Structured Analysis,**   Englewood Cliffs, N.J.: "
"Prentice-Hall, Inc., 1980."

#: ../../chapter2.rst:1431
msgid "LaFarr Stuart, \"LaFORTH,\"   **1980 FORML Proceedings,**  p. 78."
msgstr "LaFarr Stuart, \"LaFORTH,\"   **1980 FORML Proceedings,**  p. 78."

#: ../../chapter2.rst:1432
msgid ""
"Frederick P. Brooks, Jr.,  **The Mythical  Man-Month,**  Reading, "
"Massachusetts, Addison-Wesley, 1975."
msgstr ""
"Frederick P. Brooks, Jr.,  **The Mythical  Man-Month,**  Reading, "
"Massachusetts, Addison-Wesley, 1975."

